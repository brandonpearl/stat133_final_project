ptrn_country_men <- "([A-Z][A-Z][A-Z])"
ext_country_men <- function(strg , ptrn){
out <- stringr::str_extract(string = strg , pattern = ptrn)
return(out)
}
country <- ext_country_men(men_data$Athlete , ptrn_country_men)
# Function to remove brackets (and numbers inside brackets)
#men
#First, assign a pattern: 1 digit numeric value in [] (including [])
#([3], [5], ...etc qualifies)
ptrn_bracket_men <- "\\[[0-9]\\]"
#Second, create a function.
#The inputs are...
#1.the entries in the column Date 2.pattern assigned above 3.replacement (a blank space)
remove_bracket_men <- function(strg , ptrn , replace){
out <- stringr::str_replace_all(string = strg , pattern = ptrn , replace = replace)
return(out)
}
#The output will extract the entries with the pattern assigned above replaced with a blank space.
#This eliminates [3], [1], ...etc
clean_date <- remove_bracket_men(men_data$Date , ptrn_bracket_men , "")
# Function to extract city name (just the city)
#women
#First, assign a pattern: 1 digit numeric value in [] (including [])
#([3], [5], ...etc qualifies)
ptrn_city_women <- "\\[[0-9]\\]"
#Second, create a function.
#The inputs are...
#1.the entries in the column Place 2.pattern assigned above 3.replacement (a blank space)
ext_city_women <- function(strg , ptrn , replace){
out <- stringr::str_replace(string = strg , pattern = ptrn , replace = replace)
return(out)
}
#The output will extract the entries with the pattern assigned above replaced with a blank space.
#This eliminates [3], [1], ...etc
city <- ext_city_women(women_data$Place , ptrn_city_women , "")
#men
#First, assign a pattern: ,
#(only comma qualifies)
ptrn_city_men <- "\\,"
#The inputs are...
#1.the entries in the column Venue 2.pattern assigned above
#3.number of splitted columns after comma
ext_city_men <- function(strg , ptrn , number){
out <- stringr::str_split_fixed(string = strg , pattern = ptrn , n = number)
return(out)
}
#The output will be the entries splitted into two columns
#(one before and one after comma).
#From there, select the first row, where the city names reside.
city <- ext_city_men(men_data$Venue , ptrn_city_men , 2)[,1]
# Function to extract day number
#women
#First, assign a pattern. Putting a * ensures capturing the dates with 2 digits
#(21, 33, 99, ...etc qualifies)
ptrn_day_women <- "[0-9]*"
#Second, create a function.
#The inputs are 1.the entries in the column Date & 2.pattern assigned above
#as.numeric is used to convert chr vectors into numeric vectors.
ext_day_women <- function(strg , ptrn){
out <- as.numeric(stringr::str_extract(string = strg, pattern = ptrn))
return(out)
}
#The output will extract the entries with the pattern assigned above applied.
#(23->23, 1->1, ...etc)
day <- ext_day_women(women_data$Date , ptrn_day_women)
#men
#The same method applies for men's data
ptrn_day_men <- "[0-9]*"
ext_day_men <- function(strg , ptrn){
out <- as.numeric(stringr::str_extract(string = strg , pattern = ptrn))
return(out)
}
day <- ext_day_men(clean_date , ptrn_day_men)
# Function to extract month name
#women
#First, assign a pattern: a one digit number
#(0,1,...,9 qualifies)
ptrn_month_women <- "[0-9]"
#(only a blank space qualifies)
ptrn_month_space_women <- "\\s"
#Second, create a function.
#The inputs are...
#1.the entries in the column Athlete 2.pattern assigned above 3.replacement (a blank space)
ext_month_women <- function(strg , ptrn , replace){
#eliminates all numeric values
out1 <- stringr::str_replace_all(string = strg, pattern = ptrn, replace = replace)
#elminates all spaces that were between date-month and month-year
out2 <- stringr::str_replace_all(string = out1, pattern = ptrn_month_space_women, replace = "")
return(out2)
}
#the output extracts only the month, a non-numeric, but chr vector.
month <- ext_month_women(women_data$Date , ptrn_month_women , "")
#men
#The same method applies for men's data
ptrn_month_men <- "[0-9]"
ptrn_month_space_men <- "\\s"
ext_month_men <- function(strg , ptrn , replace){
out1 <- stringr::str_replace_all(string = strg, pattern = ptrn, replace = replace)
out2 <- stringr::str_replace_all(string = out1, pattern = ptrn_month_space_men, replace = "")
return(out2)
}
month <- ext_month_men(clean_date,ptrn_month_men , "")
# Function to extract year number
#women
#First, assign a pattern: a four digit number
#(0000,1111, 1234,... qualifies)
ptrn_year_women <- "[0-9][0-9][0-9][0-9]"
#Second, create a function.
#The inputs are 1.the entries in the column Date & 2.pattern assigned above
#as.numeric is used to convert chr vectors into numeric vectors.
ext_year_women <- function(strg , ptrn){
out <- as.numeric(stringr::str_extract(string = strg, pattern = ptrn_year_women))
return(out)
}
#The output will extract the entries with the pattern assigned above applied.
#(0000->0000, 1111->1111, ...etc)
year <- ext_year_women(women_data$Date , ptrn_year_women)
#men
#The same method applies for men's data.
ptrn_year_men <- "[0-9][0-9][0-9][0-9]"
ext_year_men <- function(strg , ptrn){
out <- as.numeric(stringr::str_extract(string = strg, pattern = ptrn))
return(out)
}
year <- ext_year_men(clean_date , ptrn_year_men)
# Function to reformat date (format "%d %B %Y")
#women
#as.Date() allows a variety of input formats
#Here, the input is the date formatted in the original Date column
reformat_date_women <- function(dates){
#%d:day of the month, %B:month (full name), %Y:year (4 digit),
#putting a space between ensures capturing the original format.
out <- as.Date(dates , format = "%d %B %Y")
return(out)
}
#The output is the date under class called, Date.
new_date <- reformat_date_women(women_data$Date)
#men
#The same method applies for men;'s data.
reformat_date_men <- function(dates){
out <- as.Date(dates , format = "%d %B %Y")
return(out)
}
new_date <- reformat_date_men(men_data$Date)
#===========================================================================================
#EXTRA CREDIT
#R package, MASS is installed & loaded for as.fractions function
#Function for meters to ft & inch, assigning 1.46m a as default
meters_to_inch <- function(meter=1.46) {
#Obtain total inches in a given meter
inch <- 39.3701*meter
#Obtain how many feets there are in the total inches (whole number)
full_feet <- inch%/%12
#The remainder inches that couldn't be converted into feets (real number less than 12)
feet_remainder <- inch%%12
#Obtain how many inches there are in the remainder above (whole number less than 12)
full_inch <- feet_remainder%/%1
#First, obtain the decimal values of inches that couldn't be converted into an integer
#Second, multiply this value with 8 and round to the nearest whole number.
#This value can never be greater than 8.
inch_remainder <- round((feet_remainder%%1)*8)
#Third, take the rounded number above and divide by 8.
#(1/8,2/8,3/8,...etc)
#Fourth, divide the numerator and the denominator by their greatest common factor
#(2/8 becomes 1/4, 4/8 becomes 1/2,...etc)
inch_remainder <- as.fractions(inch_remainder/8)
#One caveat: If the inch_remainder is 1, the function will return something like,
#"4 ft 9 1 in", instead of "4ft 10 in".
#The function below solves this issue by passing on the 1 to the whole number's place.
#Another caveat: Avoiding cases like "4ft 9 0in". Should be "4ft 9in", instead.
#Finally, convert the meter into ft(whole number), inch(whole number and a fraction) format.
if(inch_remainder==1){
full_inch <- (full_inch+1)
print(paste(full_feet,"ft",full_inch,"in"))
}else if(inch_remainder==0){
print(paste(full_feet,"ft",full_inch,"in"))
}else{
print(paste(full_feet,"ft",full_inch,inch_remainder,"in"))
}
}
meters_to_inch(1.83)
meters_to_inch(1.46)
?cat
?"\014"
"\014"
str("\014")
rm(list = ls())
cat("\014")
>print
?print
paste(a, sep="_")
paste(a, sep="a")
a <- c("something", "to", "paste")
paste(a, sep="p")
paste(a, sep="o")
library("ggplot2")
ggplot(data = sw, aes (x=height, y = weight))+
geom_point(shape=gender)+
geom_text(aes(label=name))
ggplot(data = sw, aes (x=height, y = weight))+
geom_point(aes(shape=gender)+
geom_text(aes(label=name))
ggplot(data = sw, aes (x=height, y = weight))+
geom_point(aes(shape=gender)+
geom_text(aes(label=name))
data.frame(
name<-c('a','p','l','le')
gender<-c('m','f','m','f')
weight<-c(1,2,3,4)
height<-c(34,23,23,35)
)
data.frame(
name<=c('a','p','l','le')
gender=c('m','f','m','f')
weight=c(1,2,3,4)
height=c(34,23,23,35)
)
data.frame(
name=c('a','p','l','le')
gender=c('m','f','m','f')
weight=c(1,2,3,4)
height=c(34,23,23,35)
)
data.frame(
name=c('a','p','l','le'),
gender=c('m','f','m','f'),
weight=c(1,2,3,4),
height=c(34,23,23,35)
)
hey<-data.frame(
name=c('a','p','l','le'),
gender=c('m','f','m','f'),
weight=c(1,2,3,4),
height=c(34,23,23,35)
)
ggplot(data = hey, aes (x=height, y = weight))+
geom_point(aes(shape=gender)+
geom_text(aes(label=name))
ggplot(data = hey, aes (x=height, y = weight))+
geom_point(shape=gender)+
geom_text(aes(label=name))
ggplot(data = hey, aes(x=height, y = weight))+
geom_point(shape=gender)+
geom_text(aes(label=name))
geom_point(aes(shape=gender)+
ggplot(data = hey, aes(x=height, y = weight))+
geom_point(aes(shape=gender)+
geom_text(aes(label=name))
ggplot(data = hey, aes(x=height, y = weight))+
geom_text(aes(label=name))+
geom_point(aes(shape=gender)
ggplot(data = hey, aes(x=height, y = weight))+
geom_text(aes(label=name))+
geom_point(aes(shape=gender)
f<-1
g<-1
for(i in 1:5){
print(f)
f<-f+g
g<-f-g
}
f<-1
g<-1
for(i in 1:5){
print(f)
f<-f+g
g<-f-g
}
f<-1
g<-1
for(i in 1:5){
f<-f+g
g<-f-g
}
print(f)
for(i in 1:4){
f<-f+g
g<-f-g
}
print(f)
f<-1
g<-1
for(i in 1:4){
f<-f+g
g<-f-g
}
print(f)
f<-1
g<-1
for(i in 1:4){
f<-f+g
g<-f-g
}
f
g
for(i in 1:4){
f<-f+g
g<-f-g
}
f
g
print(f,g)
for(i in 1:4){
f<-f+g
g<-f-g
}
print(f)
print(f)
}
print(f)
a <- c("something", "to", "paste")
paste(a, sep="_")
paste(a, sep="o")
paste(a, collapse="_")
paste(a, sep="_", collapse="-")
set.seed
?set.seed
a <- c("something", "to", "paste")
paste(a, sep="_")
paste(a, collapse="_")
b<-a
b<- c("t1", "t2", "t3")
paste("t1", "t2", "t3", sep="_")
paste("t1", "t2", "t3", sep="_")
paste(a, sep="o")
paste(a, collapse="_")
paste("t1", "t2", "t3", collapse="_")
sep
paste("t1", "t2", "t3", sep="_")
coin <- c("heads","tails")
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
for (i in 1:10){
print(sample(coin, size=1))
}
sample(coin, size=10)
sample(coin, size=10, replace=T)
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
flip <- function(coin = c('H','T'),
tosses=1, prob=c(0.5,0.5)){
sample(coin, size = tosses, replace = T, prob=prob)
}
flip()
flip(,10,)
flip(tosses=10)
flip(tosses=10, prob = c(0.3,0.7))
flip(coin=c('lol', 'overwatch'),tosses=10, prob = c(0.3,0.7))
flip1000=flip(tosses = 1000)
table(flip1000)
table(flip1000)/1000
load1000=flip(tosses=1000, tosses=1000, prob=c(0.6,0.4))
load1000(tosses=1000, prob=c(0.6,0.4))
sum(flip1000=='H')
cumsum(flip1000=='H')
cumsum(flip1000=='H')/(1:1000)
plot(1:1000, rel_freq, type= 'l')
plot(1:1000, rel_freq, type= 'l', ylim = c(0,1)
plot(1:1000, rel_freq, type= 'l', ylim = c(0,1))
rel_freq<-cumsum(flip1000=='H')/(1:1000)
plot(1:1000, rel_freq, type= 'l', ylim = c(0,1))
plot(1:100000, rel_freq, type= 'l', ylim = c(0,1))
shiny::runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
getwd()
mean(numbers, na.rm = TRUE)
barplot(x, horiz = TRUE)
matrix(1:12, nrow = 3, ncol = 4)
read.table(~/Documents/rawdata.txt, sep = '\t')
wd_root <- "C:\Users\Nicolas Min\Documents\stat133-hw4"
wd_root <- "C:\Users\Nicolas Min\Documents\stat133-hw4"
wd_root <- 'C:\Users\Nicolas Min\Documents\stat133-hw4'
library(stringr)
getwd()
list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
t2<-stringr::str_match_all("txt")
t2<-stringr::str_match_all(".txt")
t2 <- str_match_all(".txt")
t2 <- str_match_all(t1, "txt")
t1 <- list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
t2 <- str_match_all(t1, "txt")
str_match_all(t1, "txt")
old_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4", t2)
old_path
new_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/txt_files", t2)
new_path
old_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/", t2)
new_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/txt_files/", t2)
file.rename (from = old_path, to = new_path)
for(i in 1:length(old_path)) {
file.rename(old_path[i], new_path[i])
}
t1 <- list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
str_match_all(t1, "txt")
str_match_all(t1, "*txt")
t2 <- str_match_all(t1, "*.txt")
str_match_all(t1, "*.txt")
str_extract_all(t1, "txt")
str_match_all(t1, "*txt")
t1
str_match_all(t1, "txt")
t2 <- str_extract_all(t1, "txt")
str_extract_all(t1, "txt")
str_extract_all(t1, "*\\.txt")
str_extract_all(t1, "*\.txt")
str_extract_all(t1, "*.txt")
str_extract_all(string = t1, pattern = "*.txt")
str_extract_all(string = t1, pattern = "*.txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = FALSE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_match_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_match_all(string = t1, pattern = ".+txt")
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
as.vector(str_match_all(string = t1, pattern = ".+txt"))
as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
t2 <- as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
t2[t2!==""]
library(XML)
library(dplyr)
setwd("C:/Users/Nicolas Min/Desktop/stat133_final_project/project/data/cleandata")
team_data = read.csv(file = "roster-salary-stats_dummy.csv"
, sep = ",")
#Computing Missed FG & Missed FT.
missed_fg <- team_data$FGA - team_data$FG
missed_ft <- team_data$FTA - team_data$FT
#Dividing variables PTS, REB, ... TO by PG.
PTS_new <-team_data$PTS/team_data$G
TRB_new <-team_data$TRB/team_data$G
AST_new <-team_data$AST/team_data$G
STL_new <-team_data$STL/team_data$G
BLK_new <-team_data$BLK/team_data$G
missed_fg_new <- -(missed_fg/team_data$G)
missed_ft_new <- -(missed_ft/team_data$G)
TOV_new <- -(team_data$TOV/team_data$G)
#Combining the new variables.
team_data_2 <- data.frame(PTS_new,
TRB_new,
AST_new,
STL_new,
BLK_new,
missed_fg_new,
missed_ft_new,
TOV_new,
position=team_data$position)
#Subsetting the data frame according to positions.
C_subset<-filter(team_data_2, position=="C") %>% select(-position)
PF_subset<-filter(team_data_2, position=="PF") %>% select(-position)
SF_subset<-filter(team_data_2, position=="SF") %>% select(-position)
SG_subset<-filter(team_data_2, position=="SG") %>% select(-position)
PG_subset<-filter(team_data_2, position=="PG") %>% select(-position)
#Performing a PCA on each subset (scaled)
PCA_C <- prcomp(C_subset, center= TRUE, scale = TRUE)
PCA_PF <- prcomp(PF_subset, center= TRUE, scale = TRUE)
PCA_SF <- prcomp(SF_subset, center= TRUE, scale = TRUE)
PCA_SG <- prcomp(SG_subset, center= TRUE, scale = TRUE)
PCA_PG <- prcomp(PG_subset, center= TRUE, scale = TRUE)
#Re expressing PCA weights using (PC1/sd).
PCA_C_2 <- (as.vector(PCA_C$rotation[,1]))/(PCA_C$sdev)
PCA_PF_2 <- (as.vector(PCA_PF$rotation[,1]))/(PCA_PF$sdev)
PCA_SF_2 <- (as.vector(PCA_SF$rotation[,1]))/(PCA_SF$sdev)
PCA_SG_2 <- (as.vector(PCA_SG$rotation[,1]))/(PCA_SG$sdev)
PCA_PG_2 <- (as.vector(PCA_PG$rotation[,1]))/(PCA_PG$sdev)
#EFFs of players in each position
EFF_C <- data.matrix(C_subset) %*% PCA_C_2
EFF_PF <- data.matrix(PF_subset) %*% PCA_PF_2
EFF_SF <- data.matrix(SF_subset) %*% PCA_SF_2
EFF_SG <- data.matrix(SG_subset) %*% PCA_SG_2
EFF_PG <- data.matrix(PG_subset) %*% PCA_PG_2
#Data set "eff-stats-salary.csv"
#Assigning Variables
EFF <- rbind(EFF_C, EFF_PF, EFF_PG, EFF_SF, EFF_SG)
TOV <- team_data$TOV
G <- team_data$G
salary <- team_data$salary
#Creating data set, putting variables together
eff_salary_stats <- team_data %>%
select(position, player, PTS, TRB, AST, STL, BLK) %>%
mutate(missed_fg, missed_ft, TOV, G, salary) %>%
#not necessary if the data is cleaned
filter(grepl('C|PF|PG|SF|SG', position)) %>%
#not necessary if the data is cleaned
filter(!grepl('F-C', position)) %>%
arrange(position) %>%
mutate(EFF) %>%
select(-position) %>%
select(player, PTS, TRB, AST, STL, BLK, missed_fg, missed_ft, TOV, G,
EFF, salary)
#Creating a new table in the directory
write.csv(eff_salary_stats, file = "eff-salary-stats_dummy.csv")
EFF
