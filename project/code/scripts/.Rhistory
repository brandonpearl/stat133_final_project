c1 + geom_bar(stat = "identity")
c2 <- ggplot(mpg, aes(class, hwy))
c2
c2 + geom_boxplot()
View(mpg)
t <- ggplot(mpg, aes(cty, hwy)) + geom_point()
t
t + facet_grid(. ~ fl)
t + facet_grid(~fl.)
t + facet_grid(fl.~)
t + facet_grid(. ~ fl)
t + facet_grid(year ~ .)
t + facet_grid(fl ~ .)
t + facet_grid(. ~ fl)
t + facet_grid(fl ~ .)
t + facet_grid(. ~ fl)
t + facet_grid(fl ~ .)
t + facet_grid(. ~ fl)
t + facet_grid(year ~ .)
t + facet_grid(year ~ fl)
t + facet_wrap(~ fl)
r <- ggplot(mpg, aes(fl)) + geom_bar()
r
r + coord_flip()
s <- ggplot(mpg, aes(fl, fill = drv))
s
s + geom_bar(position = "dodge")
s + geom_bar(position = "fill")
s + geom_bar(position = "fill")
s + geom_bar(position = "dodge")
s <- ggplot(mpg, aes(fl, fill = drv))
s
s <- ggplot(mpg, aes(fl, fill = drv))
s
s + geom_bar(position = "dodge")
s <- ggplot(mpg, aes(fl, fill = drv))
s
s <- ggplot(mpg, aes(fl, fill = drv))
s
s + geom_bar(position = "dodge")
s + geom_bar(position)
s + geom_bar()
s + geom_bar(position = "dodge")
s + geom_bar(position = "fill")
s + geom_bar(position = "stack")
s + geom_bar(position = "fill")
s + geom_bar()
s + geom_bar(position = "stack")
download.file("https://en.wikipedia.org/wiki/Anscombe%27s_quartet", destfile = anscombe)
download.file("https://en.wikipedia.org/wiki/Anscombe%27s_quartet", destfile = "anscombe")
str(anscombe)
head(anscombe)
tail(anscombe)
summary(anscombe)
sapply(anscombe[, 1:4], FUN = var)
sapply(anscombe[, 1:4], FUN = mean)
sapply(1:4, function(x) cor(anscombe[, x], anscombe[, x+4]))
ans1 <- ggplot(anscombe, aes(x = x1, y = y1))
ans1 <- ans1 + geom_point(colour = "blue", size = 5) +
stat_smooth(method = "lm", col = "red", size = 1, se = FALSE) +
theme_bw()
ans1 <- ans1 +
scale_x_continuous(limits = c(0, 16), breaks = seq(from = 0, to = 20, by = 2)) +
scale_y_continuous(limits = c(0, 16), breaks = seq(from = 0, to = 20, by = 2))
ans1
grid.arrange(ans1, ans2, a, ans4, main = "Anscombe's Quartet")
p1 <- ggplot(mtcars, aes(wt, mpg))
p1 + geom_point(colour = factor(cyl), size = qsec)
p2 <- ggplot(mtcars, aes(wt, mpg))
p2 + geom_point(aes(colour = factor(cyl), size = qsec))
p1 <- ggplot(mtcars, aes(wt, mpg))
p1 + geom_point(colour = factor(cyl), size = qsec)
lsf(ggplot2)
ls("package:base")
ls("ggplot2")
ls("ggplot2:base")
flights2 <- nycflights13::flights
head(flights2)
colnames(flights2)
flights2[,flights2$month==1&flights2$day==1]
flights2[,flights2$month==1]
flights2[,flights2$month==1]
View(flights2)
str(flights2)
hp
hp[c(T,F,T,F),]
hp[hp[,4]==1980,]
hp[hp$born==1980]
hp[hp$born==1980,]
hp[,hp$born==1980]
hp=data.frame(
first=c('ha','her','ron','luna'),
last=c('p','g','w','l'),
gender=c('m','f','m','f'),
born=c(1980,1979,1980,1981),
spell=c('s','a','r','e'),
stringsAsFactors = FALSE
)
hp
hp[hp$born==1980]
hp[hp$born==1980,]
hp[hp$born==1980&hp$first=='ha',]
hp[hp$born==1980&hp$first=='her',]
hp[hp$born==1980|hp$first=='her',]
flights2 <- nycflights13::flights
head(flights2)
colnames(flights2)
flights2[,flights2$month==1]
filter(flights, month == 1 & day == 1)
flights2[flights2$month==1&flights2$day==1,]
filter(flights, month == 1 & day == 1)
flights2[1:30]
head(flights2,n=30)
slice(flights, 1:30)
flights2 <- flights[order(flights$year, flights$month, flights$day), ]
arrange(flights, year, month, day)
flights2
flights2_br <- flights[order(flights$year, -flights$month, -flights$day), ]
flights2_br
flights2_dp <- arrange(flights, year, desc(month), desc(day))
flights2_dp
select(flights, year, month, day)
select(flights, -year, -day)
select(flights, year, month, day)
select(flights, -year, -day) #anything but year and day
select(flights, year:day)
select(flights, -(year:day))
flights[, c("year", "month", "day")]
flights[, !names(flights) %in% c("year", "day")]
sum(runif(100))
runif(100)
sum(runif(100))
sum(runif(100))
sum(runif(100))
sum(runif(100))
set.seed(200)
sum(runif(100))
sum(runif(100))
.GlobalEnv$.Random.seed
set.seed(624)
set.seed(627)
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/1028')
size <- 4
repetitions<-20
drawn_balls <- matrix("", repetitions, size)
drawn_balls
for (r in 1:repetitions) {
aux <- runif(1)
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
}
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'white')
for (r in 1:repetitions) {
aux <- runif(1)
if (aux > 0.5) {
drawn_balls[r, ] <- sample(box1, size, replace = TRUE)
} else {
drawn_balls[r,] <- sample(box2, size)
}
}
drawn_balls
blue_counts <- apply(drawn_balls, 1, function(x) sum(x == 'blue'))
blue_counts
blue_freqs <- vector(mode = "list", length = 5)
for (num_blue in 0:4) {
temp_freqs <- cumsum(blue_counts == num_blue) / (1:input$repetitions)
blue_freqs[[num_blue + 1]] <- temp_freqs
}
# Lab 9, Stat 133 Fall 2016, Prof. Sanchez
# Shiny App version 1: Drawing balls from boxes
# Inputs:
#   repetitions: number of repetitions
#
# Outputs:
#   frequency plot of number of blue balls
library(shiny)
library(ggplot2)
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("Drawing Balls Experiment"),
# Sidebar
sidebarLayout(
sidebarPanel(
sliderInput("repetitions",
label = "Number of repetitions:",
min = 1,
max = 5000,
value = 100)
),
# Show a plot of the relative frequencies
mainPanel(
plotOutput("freqs_plot")
)
)
)
# Define server logic required to draw the plot
server <- function(input, output) {
# Fill in the spot we created for a plot
output$freqs_plot <- renderPlot({
dat <- data.frame(
reps = rep(1:input$repetitions, 5),
freqs = unlist(blue_freqs),
number = factor(rep(0:4, each = input$repetitions))
)
library(XML)
url <- 'http://mailservices.berkeley.edu/incoming/mailcodes/list'
download.file(url, 'mailcodes.html')
page1 <- htmlParse('mailcodes.html')
class(page1)
dept_names <- getNodeSet(page1, '//td[@class="view-field view-field-node-title active"]')
sapply(dept_names, xmlValue)
dept_names <- getNodeSet(page1, '//td[@class="view-field view-field-node-title active"]')
dept_names
dept_names
sapply(dept_names, xmlValue)
xpathSApply(
doc = page1,
path = '//td[@class="view-field view-field-node-title active"]',
fun = xmlValue)
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- pca$rotation[,1]
sigmas <- apply(data_by_game, 2, sd)
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
team_data_modified = rbind(team_data_modified, position_data)
}
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
#======================================================================================
# NOW, COLUMNS, "MISSED_FREE_THROWS", "MISSED_FIELD_GOALS", "TURNOVERS" ARE NEGATIVE,
# SO I TRIED THE CODE BELOW TO MAKE THEM POSITIVE.
# HOWEVER, THE CODE BELOW GIVES AN ERROR:
# Error: Each variable must be a 1d atomic vector or list. Problem variables: 'EFF'
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
team_data_modified = NULL
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- pca$rotation[,1]
sigmas <- apply(data_by_game, 2, sd)
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
team_data_modified = rbind(team_data_modified, position_data)
}
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
View(eff_stats_salary)
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- pca$rotation[,1]
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
View(eff_stats_salary)
X1 <- as.matrix(c[ ,stats] / c$Games)
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
X1 <- as.matrix(c[ ,stats] / c$Games)
print(round(cor(X1), 2), print.gap = 2)
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- pca$rotation[,1]
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#=======================================================================================
# Create data set "eff-stats-salary.csv"
#=======================================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
View(eff_stats_salary)
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(best_and_worst, "../../data/cleandata/best-worst-value-players.txt", sep=",")
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- pca$rotation[,1]
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#=======================================================================================
# Create data set "eff-stats-salary.csv"
#=======================================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(best_and_worst, "../../data/cleandata/best-worst-value-players.txt", sep=",")
