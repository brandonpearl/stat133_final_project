<<<<<<< Updated upstream
stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- abs(eff)
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
library(shiny)
library(ggplot2)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
function(input, output) {
# Get the color_by variable so we know to color by team or position
selectedColor <- reactive({
input$color_by
})
# Get the regression_by variable so we know if we should display the
# regression lines
showRegression <- reactive({
input$regression_by
})
# Generate the scatterplot
plotObj <- reactive({
# Generate plot colored by team
if (selectedColor() == "team") {
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Team)) + geom_point()
} else {
# Generate plot by position
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Position)) + geom_point()
}
# Add regression line if box is checked
if (showRegression() == TRUE) {
p = p + geom_smooth(method = "lm", se = FALSE)
}
# Add labels to plot
p = p + labs(x = input$x_var, y = input$y_var,
title = paste(input$x_var, "vs", input$y_var))
})
# Render the plot
output$plot1 <- renderPlot({
print(plotObj())
})
# Render the correlation between the variables
output$correlation <- renderText({
# Correlation only valid if both variables are numeric
if (is.numeric(merge_data[,input$x_var]) && merge_data[,input$y_var]) {
paste("Correlation:",
cor(merge_data[,input$x_var], merge_data[,input$y_var],
use = 'pairwise.complete.obs'))
}
})
}
library(shiny)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
fluidPage(
# Title of page
headerPanel('Salary Statistics by Team'),
sidebarPanel(
# X Variable dropdown, choosing only quantitative variables
selectInput(
'x_var',
'X Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Y Variable dropdown, choosing only quantitative variables
selectInput(
'y_var',
'Y Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Radio button to choose to color by team or position
radioButtons("color_by", label = "Color",
choices = c("Team" = "team", "Position" = "position"),
selected = "team"),
# Checkbox to choose to display regression line
checkboxInput("regression_by",
label = "Show Regression Line",
value = FALSE),
textOutput("correlation")
),
# Display the plot
mainPanel(
plotOutput("plot1")
)
)
runApp()
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
library(shiny)
library(ggplot2)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
function(input, output) {
# Get the color_by variable so we know to color by team or position
selectedColor <- reactive({
input$color_by
})
# Get the regression_by variable so we know if we should display the
# regression lines
showRegression <- reactive({
input$regression_by
})
# Generate the scatterplot
plotObj <- reactive({
# Generate plot colored by team
if (selectedColor() == "team") {
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Team)) + geom_point()
} else {
# Generate plot by position
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Position)) + geom_point()
}
# Add regression line if box is checked
if (showRegression() == TRUE) {
p = p + geom_smooth(method = "lm", se = FALSE)
}
# Add labels to plot
p = p + labs(x = input$x_var, y = input$y_var,
title = paste(input$x_var, "vs", input$y_var))
})
# Render the plot
output$plot1 <- renderPlot({
print(plotObj())
})
# Render the correlation between the variables
output$correlation <- renderText({
# Correlation only valid if both variables are numeric
if (is.numeric(merge_data[,input$x_var]) && merge_data[,input$y_var]) {
paste("Correlation:",
cor(merge_data[,input$x_var], merge_data[,input$y_var],
use = 'pairwise.complete.obs'))
=======
library(shiny)
library(stringr)
# This is the server.R
function(input, output) {
output$hist <- renderPlot({
hist(rnorm(n = input$n
, mean = input$mean
, sd = input$sd))
})
# Dynamically create text string from the input
text <- reactive({
stringr::str_c("You have selected this range"
, toString(min(input$range)), "to"
, toString(max(input$range))
, sep = " ")
})
# We will call the output value "textval"
# We will render this in the ui.R using the renderText shiny
# function
output$textval <- renderText(text())
}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
install.packages("shiny")
library(shiny)
ui <- fluidPage(
# *Input() functions,
# *Output() functions
)
server <- function(input, output) {
output$obj <- renderPlot({
hist(x)
})
}
shinyApp(ui = ui, server = server)
install.packages("xml", dependencies = TRUE)
install.packages("XML", dependencies = TRUE)
library(XML)
library("XML")
xmlParse(https://math.berkeley.edu/~nglukhoa/math185.html)
xmlParse("https://math.berkeley.edu/~nglukhoa/math185.html")
xmlParse("https://math.berkeley.edu/~nglukhoa/math185.html", isHTML = TRUE)
DOC = xmlParse("https://math.berkeley.edu/~nglukhoa/math185.html", isHTML = TRUE)
class(DOC)
DOC = htmlParse("https://math.berkeley.edu/~nglukhoa/math185.html", isHTML = TRUE)
DOC = htmlParse("https://math.berkeley.edu/~nglukhoa/math185.html")
doc = XML::htmlParse("https://math.berkeley.edu/~nglukhoa/math185.html")
library(XML)
install.packages("XML", dependencies = TRUE)
install.packages("XML", dependencies = TRUE)
library(XML)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
text_fields <- c("Player",
"Team",
"Position",
"Country",
"College")
# Get the full player table
t_location <- "../../data/cleandata/roster-salary-stats.csv"
full_player_table <- read.csv(t_location,
stringsAsFactors = FALSE)
field = "Number"
freq <- player_data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
freq = freq[-nrow(freq),]
freq <- player_data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
freq = freq[-nrow(freq),]
player_data = full_player_table
freq <- player_data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
freq = freq[-nrow(freq),]
player_data
field = "Number"
player_data = full_player_table
freq <- player_data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
freq = freq[-nrow(freq),]
freq
player_data
library(dplyr)
freq <- player_data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
freq = freq[-nrow(freq),]
freq
library(ggplot2)
p_his <- ggplot(player_data, aes(x = Number)) +
geom_histogram(binwidth = 0.1,fill = "#00BFC4",
colour = "black",
size = .2)
p_his
p_his <- ggplot(player_data, aes(x = Number)) +
geom_histogram(fill = "#00BFC4",
colour = "black",
size = .2)
p
p_his
create_box_histogram <- function(player_data, text_fields) {
print("start")
# checking inputs
if (class(full_player_table) != "data.frame" ||
class(text_fields) != "character") {
stop("Please check input types to 'create_summary_file'.")
}
# modify the Birth.Date columns
player_data$Birth.Date = sapply(str_split(player_data$Birth.Date, "-"),
"[[",
1)
print(player_data$Birth.Date)
number_cols <- names(player_data[,!names(player_data) %in% text_fields])
print("pass")
# loop through all quantitative variable in roster-salary-stats data frame
for (field in number_cols) {
print(field)
freq <- player_data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
freq = freq[-nrow(freq),]
# boxplot for quantitative variables
switch(
field,
Number = {
aes = aes(x = Number , y = n)
aes1 = aes(x = Number)
},
Weight = {
aes = aes(x = Weight , y = n)
aes1 = aes(x = Weight)
},
Experience = {
aes = aes(x = Experience , y = n)
aes1 = aes(x = Experience)
},
Age = {
aes = aes(x = Age , y = n)
aes1 = aes(x = Age)
},
Games_Started = {
aes = aes(x = Games_Started , y = n)
aes1 = aes(x = Games_Started)
},
Field_Goals =  {
aes = aes(x = Field_Goals , y = n)
aes1 = aes(x = Field_Goals)
},
Field_Goal_Percentage = {
aes = aes(x = Field_Goal_Percentage , y = n)
aes1 = aes(x = Field_Goal_Percentage)
},
X3.Point_Field_Goal_Attempts = {
aes = aes(x = X3.Point_Field_Goal_Attempts , y = n)
aes1 = aes(x = X3.Point_Field_Goal_Attempts)
},
X2.Point_Field_Goals = {
aes = aes(x = X2.Point_Field_Goals , y = n)
aes1 = aes(x = X2.Point_Field_Goals)
},
X2.Point_Field_Goal_Percentage = {
aes = aes(x = X2.Point_Field_Goal_Percentage , y = n)
aes1 = aes(x = X2.Point_Field_Goal_Percentage)
},
Free_Throws = {
aes = aes(x = Free_Throws , y = n)
aes1 = aes(x = Free_Throws)
},
Free_Throw_Percentage = {
aes = aes(x = Free_Throw_Percentage , y = n)
aes1 = aes(x = Free_Throw_Percentage)
},
Defensive_Rebounds = {
aes = aes(x = Defensive_Rebounds , y = n)
aes1 = aes(x = Defensive_Rebounds)
},
Assists = {
aes = aes(x = Assists , y = n)
aes1 = aes(x = Assists)
},
Blocks = {
aes = aes(x = Blocks , y = n)
aes1 = aes(x = Blocks)
},
Personal.Fouls = {
aes = aes(x = Personal.Fouls , y = n)
aes1 = aes(x = Personal.Fouls)
},
Rank_Salary = {
aes = aes(x = Rank_Salary , y = n)
aes1 = aes(x = Rank_Salary)
},
Height = {
aes = aes(x = Height , y = n)
aes1 = aes(x = Height)
},
Birth.Date = {
aes = aes(x = Birth.Date , y = n)
aes1 = aes(x = Birth.Date)
},
Rank_Totals = {
aes = aes(x = Rank_Totals , y = n)
aes1 = aes(x = Rank_Totals)
},
Games = {
aes = aes(x = Games , y = n)
aes1 = aes(x = Games)
},
Minutes_Played = {
aes = aes(x = Minutes_Played , y = n)
aes1 = aes(x = Minutes_Played)
},
Field_Goal_Attempts = {
aes = aes(x = Field_Goal_Attempts , y = n)
aes1 = aes(x = Field_Goal_Attempts)
},
X3.Point_Field_Goals = {
aes = aes(x = X3.Point_Field_Goals , y = n)
aes1 = aes(x = X3.Point_Field_Goals)
},
X3.Point_Field_Goal_Percentage = {
aes = aes(x = X3.Point_Field_Goal_Percentage , y = n)
aes1 = aes(x = X3.Point_Field_Goal_Percentage)
},
X2.point_Field_Goal_Attempts = {
aes = aes(x = X2.point_Field_Goal_Attempts , y = n)
aes1 = aes(x = X2.point_Field_Goal_Attempts)
},
Effective_Field_Goal_Percentage = {
aes = aes(x = Effective_Field_Goal_Percentage , y = n)
aes1 = aes(x = Effective_Field_Goal_Percentage)
},
Free_Throw_Attempts = {
aes = aes(x = Free_Throw_Attempts , y = n)
aes1 = aes(x = Free_Throw_Attempts)
},
Offensive_Rebounds = {
aes = aes(x = Offensive_Rebounds , y = n)
aes1 = aes(x = Offensive_Rebounds)
},
Total_Rebounds = {
aes = aes(x = Total_Rebounds , y = n)
aes1 = aes(x = Total_Rebounds)
},
Steals = {
aes = aes(x = Steals , y = n)
aes1 = aes(x = Steals)
},
Turnovers = {
aes = aes(x = Turnovers , y = n)
aes1 = aes(x = Turnovers)
},
Points = {
aes = aes(x = Points , y = n)
aes1 = aes(x = Points)
},
Salary = {
aes = aes(x = Salary , y = n)
aes1 = aes(x = Salary)
>>>>>>> Stashed changes
}
})
}
library(shiny)
library(shiny)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
fluidPage(
# Title of page
headerPanel('Salary Statistics by Team'),
sidebarPanel(
# X Variable dropdown, choosing only quantitative variables
selectInput(
'x_var',
'X Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Y Variable dropdown, choosing only quantitative variables
selectInput(
'y_var',
'Y Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Radio button to choose to color by team or position
radioButtons("color_by", label = "Color",
choices = c("Team" = "team", "Position" = "position"),
selected = "team"),
# Checkbox to choose to display regression line
checkboxInput("regression_by",
label = "Show Regression Line",
value = FALSE),
textOutput("correlation")
),
# Display the plot
mainPanel(
plotOutput("plot1")
)
<<<<<<< Updated upstream
)
runApp()
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
=======
print(paste("start plotting", field))
# plotting box plot
p <- ggplot(freq, aes) + geom_boxplot()
p <- p + ylab("Frequency")
p <- p + theme(axis.text.x = element_text(face = "bold",
size = rel(1.1)))
p <- p + theme(axis.text.y = element_text(face = "bold",
size = rel(1.1)))
p <- p + theme(axis.title.x = element_text(size = 12, face = "bold"))
p <- p + theme(axis.title.y = element_text(size = 12, face = "bold"))
p <- p + ggtitle(paste("Frequency of", noquote(field))) +
theme(plot.title = element_text(size = rel(1.2), face = "bold"))
print("save it")
png(
filename = paste0(noquote(field), ".png"),
width = 800,
height = 500
)
plot(p)
dev.off()
print(paste("start plotting histogram for", field))
# plotting histogram
p_his <- ggplot(player_data, aes1) +
geom_histogram(fill = "#00BFC4",
colour = "black",
size = .2)
p_his <- p_his + ylab("Frequency")
p_his <- p_his + theme(axis.text.x = element_text(face = "bold",
size = rel(1.1)))
p_his <- p_his + theme(axis.text.y = element_text(face = "bold",
size = rel(1.1)))
p_his <- p_his + theme(axis.title.x = element_text(size = 12,
face = "bold"))
p_his <- p_his + theme(axis.title.y = element_text(size = 12,
face = "bold"))
p_his <- p_his + ggtitle(paste("His of Frequency of", noquote(field))) +
theme(plot.title = element_text(size = rel(1.2), face = "bold"))
print("save plot")
png(
filename = paste0(noquote(field), ".png"),
width = 800,
height = 500
)
# save plot in png format to file images
plot(p_his)
dev.off()
}
}
create_box_histogram(player_data, text_fields)
library(stringr)
create_box_histogram(player_data, text_fields)
create_box_histogram(player_data, text_fields)
field = "College"
freq <- data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
freq
freq = as.data.frame(freq)
idx = which(freq[,2] <= mean(freq$n))
freq = freq[-c(idx, nrow(freq)),]
freq
text_fields
text_fields2 = text_field[-1,]
text_fields2 = text_fields[-1,]
text_fields2 = text_fields[,-1]
text_fields2 = text_fields[-1]
text_fields2
field = "College"
freq <- data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
idx = which(freq[,2] <= mean(freq$n))
freq = freq[-c(idx, nrow(freq)),]
data = full_player_table
freq <- data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
idx = which(freq[,2] <= mean(freq$n))
freq = freq[-c(idx, nrow(freq)),]
freq
freq$College = abbreviate(
freq$College,
minlength = 4,
use.classes = TRUE,
dot = FALSE,
strict = FALSE,
method = c("left.kept")
p <- ggplot(freq, aes(x = College,y = n)) + geom_bar(stat = "identity")
p <- ggplot(freq, aes(x = College,y = n)) + geom_bar(stat = "identity")
p
p <- ggplot(freq, aes(x = College)) + geom_bar()
p
p
p <- ggplot(freq, aes(x = College)) + geom_bar()
p <- ggplot(freq, aes(x = College)) + geom_bar()
freq
freq$College = abbreviate(
freq$College,
minlength = 4,
use.classes = TRUE,
dot = FALSE,
strict = FALSE,
method = c("left.kept")
)
freq
a <- ggplot(freq, aes(x = College))
a
a <- ggplot(freq, aes(x = College)) + geom_bar
a <- ggplot(freq, aes(x = College)) + geom_bar()
a
ggplot()
field = "College"
freq <- player_data %>%
dplyr::select_(field) %>%
dplyr::group_by_(field) %>%
dplyr::count() %>%
dplyr::arrange()
freq = as.data.frame(freq)
idx = which(freq[,2] <= mean(freq$n))
freq = freq[-c(idx, nrow(freq)),]
freq
field
p <- ggplot(freq, aes(x = College))
p
p <- ggplot(freq, aes(x = College))
p
p
p <- ggplot(player_data, aes(x = College))
p
>>>>>>> Stashed changes
