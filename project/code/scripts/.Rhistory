g
for(i in 1:4){
f<-f+g
g<-f-g
}
f
g
print(f,g)
for(i in 1:4){
f<-f+g
g<-f-g
}
print(f)
print(f)
}
print(f)
a <- c("something", "to", "paste")
paste(a, sep="_")
paste(a, sep="o")
paste(a, collapse="_")
paste(a, sep="_", collapse="-")
set.seed
?set.seed
a <- c("something", "to", "paste")
paste(a, sep="_")
paste(a, collapse="_")
b<-a
b<- c("t1", "t2", "t3")
paste("t1", "t2", "t3", sep="_")
paste("t1", "t2", "t3", sep="_")
paste(a, sep="o")
paste(a, collapse="_")
paste("t1", "t2", "t3", collapse="_")
sep
paste("t1", "t2", "t3", sep="_")
coin <- c("heads","tails")
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
sample(coin, size=1)
for (i in 1:10){
print(sample(coin, size=1))
}
sample(coin, size=10)
sample(coin, size=10, replace=T)
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
sample(coin, size=10, replace=T, prob=c(0.1,0.9))
flip <- function(coin = c('H','T'),
tosses=1, prob=c(0.5,0.5)){
sample(coin, size = tosses, replace = T, prob=prob)
}
flip()
flip(,10,)
flip(tosses=10)
flip(tosses=10, prob = c(0.3,0.7))
flip(coin=c('lol', 'overwatch'),tosses=10, prob = c(0.3,0.7))
flip1000=flip(tosses = 1000)
table(flip1000)
table(flip1000)/1000
load1000=flip(tosses=1000, tosses=1000, prob=c(0.6,0.4))
load1000(tosses=1000, prob=c(0.6,0.4))
sum(flip1000=='H')
cumsum(flip1000=='H')
cumsum(flip1000=='H')/(1:1000)
plot(1:1000, rel_freq, type= 'l')
plot(1:1000, rel_freq, type= 'l', ylim = c(0,1)
plot(1:1000, rel_freq, type= 'l', ylim = c(0,1))
rel_freq<-cumsum(flip1000=='H')/(1:1000)
plot(1:1000, rel_freq, type= 'l', ylim = c(0,1))
plot(1:100000, rel_freq, type= 'l', ylim = c(0,1))
shiny::runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
runApp('DeMere')
getwd()
mean(numbers, na.rm = TRUE)
barplot(x, horiz = TRUE)
matrix(1:12, nrow = 3, ncol = 4)
read.table(~/Documents/rawdata.txt, sep = '\t')
wd_root <- "C:\Users\Nicolas Min\Documents\stat133-hw4"
wd_root <- "C:\Users\Nicolas Min\Documents\stat133-hw4"
wd_root <- 'C:\Users\Nicolas Min\Documents\stat133-hw4'
library(stringr)
getwd()
list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
t2<-stringr::str_match_all("txt")
t2<-stringr::str_match_all(".txt")
t2 <- str_match_all(".txt")
t2 <- str_match_all(t1, "txt")
t1 <- list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
t2 <- str_match_all(t1, "txt")
str_match_all(t1, "txt")
old_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4", t2)
old_path
new_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/txt_files", t2)
new_path
old_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/", t2)
new_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/txt_files/", t2)
file.rename (from = old_path, to = new_path)
for(i in 1:length(old_path)) {
file.rename(old_path[i], new_path[i])
}
t1 <- list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
str_match_all(t1, "txt")
str_match_all(t1, "*txt")
t2 <- str_match_all(t1, "*.txt")
str_match_all(t1, "*.txt")
str_extract_all(t1, "txt")
str_match_all(t1, "*txt")
t1
str_match_all(t1, "txt")
t2 <- str_extract_all(t1, "txt")
str_extract_all(t1, "txt")
str_extract_all(t1, "*\\.txt")
str_extract_all(t1, "*\.txt")
str_extract_all(t1, "*.txt")
str_extract_all(string = t1, pattern = "*.txt")
str_extract_all(string = t1, pattern = "*.txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = FALSE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_match_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_match_all(string = t1, pattern = ".+txt")
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
as.vector(str_match_all(string = t1, pattern = ".+txt"))
as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
t2 <- as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
t2[t2!==""]
library(XML)
library(dplyr)
library(ggplot2)
library(FactoMineR)#not needed
download.packages("FactoMineR")
download.packages("FactoMineR")
getwd()
download.packages("knitR")
install.packages("FactoMineR")
library(FactoMineR)#not needed
dat <- read.csv("data/roster-salary-stats.csv",
row.names = 1,
stringsAsFactors = FALSE)
dat <- read.csv("roster-salary-stats_dummy",
row.names = 1,
stringsAsFactors = FALSE)
dat <- read.csv("roster-salary-stats_dummy.csv",
row.names = 1,
stringsAsFactors = FALSE)
setwd("C:/Users/Nicolas Min/Desktop/stat133_final_project/project/data/cleandata")
dat <- read.csv("roster-salary-stats_dummy.csv",
row.names = 1,
stringsAsFactors = FALSE)
View(dat)
pg <- dat %>%
filter(position == 'PG') %>%
mutate(MFT = FTA - FT) %>%
mutate(MFG = FGA - FG)
pg <- dat %>%
filter(position == 'PG') %>%
mutate(MFT = FTA - FT) %>%
mutate(MFG = FGA - FG)
View(pg)
stats <- c('PTS', 'TRB', 'AST', 'STL', 'BLK', 'MFT', 'MFG', 'TOV')
print(round(cor(pg[ ,stats]), 2), print.gap = 3)
pairs(pg[ ,stats], pch = 20)
pca <- PCA(pg[ ,stats], graph = FALSE)
plot(pca, choix = "var")
print(round(cor(pg[ ,stats]), 2), print.gap = 3) #correlation matrix
pairs(pg[ ,stats], pch = 20)
print(round(cor(pg[ ,stats]), 2), print.gap = 3) #correlation matrix
pairs(pg[ ,stats], pch = 20)
pca <- PCA(pg[ ,stats], graph = FALSE)
plot(pca, choix = "var")
pg <- dat %>%
filter(position == 'PG') %>%
mutate(MFT = FT - FTA) %>%
mutate(MFG = FG - FGA) %>%
mutate(TO = -1 * TOV)
head(pg)
stats <- c('PTS', 'TRB', 'AST', 'STL', 'BLK', 'MFG', 'MFT', 'TO')
X <- as.matrix(pg[ ,stats] / pg$G)
print(round(cor(X), 2), print.gap = 2)
pg_pca <- prcomp(X, center = TRUE, scale. = TRUE)
pg_weights <- pg_pca$rotation[,1]
pg_sigmas <- apply(X, 2, sd)
pg_eff <- X %*% (pg_weights / pg_sigmas)
pg$EFF <- pg_eff
X <- as.matrix(pg[ ,stats] / pg$G)
X
print(round(cor(X), 2), print.gap = 2)
pg_pca <- prcomp(X, center = TRUE, scale. = TRUE)
pg_pca
pg_weights <- pg_pca$rotation[,1]
pg_weights
pg_sigmas <- apply(X, 2, sd)
pg_sigmas
pg_sigmas <- apply(X, 2, sd)
pg_eff <- X %*% (pg_weights / pg_sigmas)
pg_eff
pg$EFF <- pg_eff
pg$EFF
pg$EFF <- pg_eff
ggplot(data = pg, aes(x = salary, y = EFF, label = player)) +
geom_point()
ggplot(data = pg, aes(x = salary, y = EFF, label = player)) +
geom_point() +
geom_label()
ggplot(data = pg, aes(x = height, y = EFF)) +
geom_point()
ggplot(data = pg, aes(x = weight, y = EFF)) +
geom_point()
ggplot(data = pg, aes(x = MFT / G, y = EFF, label = player)) +
geom_point() +
geom_label()
ggplot(data = pg, aes(x = MFT / G, y = EFF, label = player)) +
geom_point() +
geom_text()
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv"
, sep = ",")
team_data
View(team_data)
View(team_data)
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
row.names = 1,
stringsAsFactors = FALSE
, sep = ",")
team_data
View(team_data)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed.Free.Throws = Free.Throws - Free.Throw.Attempts) %>%
mutate(Missed.Field.Goals = Field.Goals - Field.Goal.Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
head(pg)
stats <- c('Total.Points', 'Total.Rebounds', 'Assists', 'Steals', 'Blocks',
'Missed.Free.Throws', 'Missed.Field.Goals', 'Turnovers')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",",
row.names = 1,
stringsAsFactors = FALSE)
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
row.names = 1,
stringsAsFactors = FALSE,
sep = ",")
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",",
row.names = 1)
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
row.names = 1,
sep = ","
)
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
View(team_data)
pg <- team_data %>%
filter(position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
library(dplyr)
pg <- team_data %>%
filter(position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
head(pg)
View(pg)
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
X <- as.matrix(pg[ ,stats] / pg$G)
X
print(round(cor(X), 2), print.gap = 2)
pg[ ,stats] / pg$G
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
X <- as.matrix(pg[ ,stats] / pg$G)
X
print(round(cor(X), 2), print.gap = 2)
pg[ ,stats] / pg$G
getwd()
pg[ ,stats]
X <- as.matrix(pg[ ,stats] / pg$Games)
X
print(round(cor(X), 2), print.gap = 2)
pg_pca <- prcomp(X, center = TRUE, scale. = TRUE)
pg_weights <- pg_pca$rotation[,1]
pg_weights
pg_sigmas <- apply(X, 2, sd)
pg_eff <- X %*% (pg_weights / pg_sigmas)
pg$EFF <- pg_eff
pg$EFF
pg
View(pg)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
View(pg)
position_list<-('C', 'PF', 'PG', 'SF', 'SG')
position_list <- c('C', 'PF', 'PG', 'SF', 'SG')
position_list <- c('C', 'PF', 'PG', 'SF', 'SG')
for (i in position_list) {
i <- team_data %>%
filter(Position == i) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
}
View(C)
View('C')
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
position_list <- c('C', 'PF', 'PG', 'SF', 'SG')
for (i in position_list) {
i <- team_data %>%
filter(Position == i) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
}
View("i")
View(i)
View(C)
View('C')
View('PF')
for (i in position_list) {
'i' <- team_data %>%
filter(Position == i) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
}
View('PF')
View(PF)
View(i)
for (i in position_list) {
'i' <- team_data %>%
filter(Position == i) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
print(i)
}
clist<-c('a','b','c','d')
for (i in clist) {
i<-"this is" i
}
for (i in clist) {
i<-"this is"
}
print(i)
for (i in clist) {
"this is" i
}
for (i in clist) {
"this is" (i)
}
for (i in clist) {
"this is" "i"
}
for (i in clist) {
"this is", "i"
}
position_list <- c('C', 'PF', 'PG', 'SF', 'SG')
repeat (i in position_list) {
'i' <- team_data %>%
filter(Position == i) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
}
for (i in position_list) {
'i' <- team_data %>%
filter(Position == i) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
}
position_list <- c('C', 'PF', 'PG', 'SF', 'SG')
for (i in position_list) {
i <- team_data
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
X1 <- as.matrix(c[ ,stats] / c$Games)
print(round(cor(X1), 2), print.gap = 2)
X2 <- as.matrix(pf[ ,stats] / pf$Games)
print(round(cor(X2), 2), print.gap = 2)
X3 <- as.matrix(pg[ ,stats] / pg$Games)
print(round(cor(X3), 2), print.gap = 2)
X4 <- as.matrix(sf[ ,stats] / sf$Games)
print(round(cor(X4), 2), print.gap = 2)
X5 <- as.matrix(sg[ ,stats] / sg$Games)
print(round(cor(X5), 2), print.gap = 2)
c_pca <- prcomp(X1, center = TRUE, scale. = TRUE)
c_weights <- c_pca$rotation[,1]
pf_pca <- prcomp(X2, center = TRUE, scale. = TRUE)
pf_weights <- pf_pca$rotation[,1]
pg_pca <- prcomp(X3, center = TRUE, scale. = TRUE)
pg_weights <- pg_pca$rotation[,1]
sf_pca <- prcomp(X4, center = TRUE, scale. = TRUE)
sf_weights <- sf_pca$rotation[,1]
sg_pca <- prcomp(X5, center = TRUE, scale. = TRUE)
sg_weights <- sg_pca$rotation[,1]
pg_sigmas <- apply(X, 2, sd)
c_sigmas <- apply(X, 2, sd)
pf_sigmas <- apply(X, 2, sd)
pg_sigmas <- apply(X, 2, sd)
sf_sigmas <- apply(X, 2, sd)
sg_sigmas <- apply(X, 2, sd)
c_sigmas <- apply(X1, 2, sd)
pf_sigmas <- apply(X2, 2, sd)
pg_sigmas <- apply(X3, 2, sd)
sf_sigmas <- apply(X4, 2, sd)
sg_sigmas <- apply(X5, 2, sd)
c_eff <- X1 %*% (c_weights / c_sigmas)
c$EFF <- c_eff
pf_eff <- X2 %*% (pf_weights / pf_sigmas)
pf$EFF <- pf_eff
pg_eff <- X3 %*% (pg_weights / pg_sigmas)
pg$EFF <- pg_eff
sf_eff <- X4 %*% (sf_weights / sf_sigmas)
sf$EFF <- sf_eff
sg_eff <- X5 %*% (sg_weights / sg_sigmas)
sg$EFF <- sg_eff
team_data_modified <- rbind(c, pf, pg, sf, sg)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
View(eff_stats_salary)
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
write.table(best_worst, "../../data/cleandata/best-worst-value-players.txt", sep=",")
write.table(best_and_worst, "../../data/cleandata/best-worst-value-players.txt", sep=",")
