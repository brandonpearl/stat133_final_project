<<<<<<< HEAD
colnames(roster_file) <- col_names
index = c(1, 3, 4, 5, 8)
name = c("Number", "Position", "Height", "Weight", "Experience")
for (j in 1:length(index)) {
names(roster_file)[index[j]] <- paste(name[j])
}
# remove position
position_ls <- c("C", "PF", "SF", "SG", "PG")
removed =  which(!roster_file$Position %in% position_ls)
if (length(removed) >= 1) {
roster_file =  roster_file[-removed, ]
}
roster_file$Position = factor(roster_file$Position)
# change Number to numeric
roster_file[, 1] <- as.numeric(roster_file[, 1])
# Clean Country column ( change to upper case)
roster_file[, 7] <- toupper(roster_file[, 7])
# Clean the Experience Column
invalid_R = which(roster_file$Experience == "R")
if (length(invalid_R >= 1)) {
roster_file[, 8][which(roster_file$Experience == "R")] <- "0"
}
roster_file[, 8] <- as.numeric(roster_file[, 8])
# Clean the Height Column
ft = sapply(str_split(roster_file$Height, "-"), "[[", 1)
inches = sapply(str_split(roster_file$Height, "-"), "[[", 2)
roster_file$Height = round(as.numeric(paste0(ft, ".", inches)) * 0.3048, digits = 2)
# Clean the weight column
roster_file[, 5] = round(as.numeric(roster_file[, 5] * 0.453592), digits = 2)
# Clean the Birth Date column
year <-
sapply(str_split(roster_file$"Birth Date", ","), "[[", 2)
temp <-
sapply(str_split(roster_file$"Birth Date", ","), "[[", 1)
month <- str_trim(str_extract(temp, "\\D+"))
day <- str_trim(str_extract(temp, "\\d+"))
num2Month <- function(x) {
months <- c(
january = 1,
february = 2,
march = 3,
april = 4,
may = 5,
june = 6,
july = 7,
august = 8,
september = 9,
october = 10,
november = 11,
december = 12
)
x <- tolower(x)
month_new = lapply(x, function(x)
months[x])
month_new = as.numeric(unlist(month_new))
}
month = as.character(num2Month(month))
roster_file$"Birth Date" = as.Date(paste(year, month, day, sep = "-"),
format = "%Y-%m-%d")
# Clean the College Column
roster_file[, 9][which(roster_file$College == "")] <- NA
roster_file$Team <- rep(f_name[k], time = nrow(roster_file))
str(roster_file)
# clean stats-data
setwd("../stat-data")
folder <- getwd()
folder <- paste0(folder, "/")
stat_file = read.csv(paste(folder, file_list[k], sep = ''), as.is = TRUE)
# change column names
col_names <- c(
"Rank",
"Player",
"Age",
"Games",
"Games_Started",
"Minutes_Played",
"Field_Goals",
"Field_Goal_Attempts",
"Field_Goal_Percentage",
"3-Point_Field_Goals",
"3-Point_Field_Goal_Attempts",
"3-Point_Field_Goal_Percentage",
"2-Point_Field_Goals",
"2-point_Field_Goal_Attempts",
"2-Point_Field_Goal_Percentage",
"Effective_Field_Goal_Percentage",
"Free_Throws",
"Free_Throw_Attempts",
"Free_Throw_Percentage",
"Offensive_Rebounds",
"Defensive_Rebounds",
"Total_Rebounds",
"Assists",
"Steals",
"Blocks",
"Turnovers",
"Personal Fouls",
"Points"
)
colnames(stat_file) <- col_names
#remove the one whose position is not one of the 5 required positions
if (length(removed) >= 1) {
stat_file = stat_file[-removed,]
}
stat_file[, 1] <- as.numeric(stat_file[, 1])
for (i in 3:ncol(stat_file)) {
index = which(is.na(stat_file[, i]))
if (length(index) >= 1) {
stat_file[, i][which(is.na(stat_file[, i]))] <-  NA
}
stat_file[, i] = as.numeric(stat_file[, i])
}
stat_file$Team <- rep(f_name[k], time = nrow(stat_file))
str(stat_file)
# clean salary-data
setwd("../salary-data")
folder <- getwd()
folder <- paste0(folder, "/")
salary_file = read.csv(paste(folder, file_list[k], sep = ''), as.is = TRUE)
if (length(removed) >= 1) {
salary_file = salary_file[-removed,]
}
colnames(salary_file)[1] <- "Rank"
colnames(salary_file)[2] <- "Player"
colnames(salary_file)[3] <- "Salary"
salary_file[, 1] <- as.numeric(salary_file[, 1])
salary_file[, 3] <-
sapply(str_split(salary_file[, 3], "[$]"), "[[", 2)
salary_file[, 3] <- gsub(",", "", salary_file[, 3])
salary_file[, 3] <- as.numeric(salary_file[, 3])
salary_file$Team <- rep(f_name[k], time = nrow(salary_file))
str(salary_file)
temp = data.frame()
temp = merge(
x = roster_file,
y = stat_file,
by = c("Player", "Team"),
all = TRUE
)
temp = merge(x = temp, y = salary_file, by = c("Player", "Team"), all = TRUE)
roster_salary_stats = rbind(roster_salary_stats, temp)
}
colnames(roster_salary_stats)[11] <- "Rank_Totals"
colnames(roster_salary_stats)[38] <- "Rank_Salary"
write.csv(
roster_salary_stats,
file = paste0('../../cleandata/', "roster-salary-stats-test" , ".csv"),
row.names = FALSE
)
# clean-data-script oster-salary-stats.csv
library(stringr)
# Set current working directory to the one containing clean-data-scripts.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../data/rawdata/roster-data")
folder <- getwd()
#folder = paste0(folder, "/")
file_list <- list.files(path = paste0(folder,"/"), pattern = "*.csv")
f_name = c()
#
for (id in 1:length(file_list)) {
name <- str_split(file_list[id], pattern = '')
name <- unlist(name)
name <- name[1:which(name == '.') - 1]
f_name[id] <- paste0(name, collapse = '')
}
roster_salary_stats = data.frame()
removed = 0
# length(file_list)
for (k in 1:2){
setwd("../../data/rawdata/roster-data")
# setwd("../rawdata/roster-data")
folder <- getwd()
#read roster_file
roster_file = read.csv(paste(paste0(folder, "/"), file_list[k], sep = ''),
as.is = TRUE,
row.names = NULL, header = TRUE)
# change the variable name/col name
colnames(roster_file)[7] <- "roster.Country"
colnames(roster_file)[6] <- "roster.Birth Date"
col_names <-
sapply(str_split(colnames(roster_file), "[.]"), "[[", 2)
colnames(roster_file) <- col_names
index = c(1, 3, 4, 5, 8)
name = c("Number", "Position", "Height", "Weight", "Experience")
for (j in 1:length(index)) {
names(roster_file)[index[j]] <- paste(name[j])
}
# remove position
position_ls <- c("C", "PF", "SF", "SG", "PG")
removed =  which(!roster_file$Position %in% position_ls)
if (length(removed) >= 1) {
roster_file =  roster_file[-removed, ]
}
roster_file$Position = factor(roster_file$Position)
# change Number to numeric
roster_file[, 1] <- as.numeric(roster_file[, 1])
# Clean Country column ( change to upper case)
roster_file[, 7] <- toupper(roster_file[, 7])
# Clean the Experience Column
invalid_R = which(roster_file$Experience == "R")
if (length(invalid_R >= 1)) {
roster_file[, 8][which(roster_file$Experience == "R")] <- "0"
}
roster_file[, 8] <- as.numeric(roster_file[, 8])
# Clean the Height Column
ft = sapply(str_split(roster_file$Height, "-"), "[[", 1)
inches = sapply(str_split(roster_file$Height, "-"), "[[", 2)
roster_file$Height = round(as.numeric(paste0(ft, ".", inches)) * 0.3048, digits = 2)
# Clean the weight column
roster_file[, 5] = round(as.numeric(roster_file[, 5] * 0.453592), digits = 2)
# Clean the Birth Date column
year <-
sapply(str_split(roster_file$"Birth Date", ","), "[[", 2)
temp <-
sapply(str_split(roster_file$"Birth Date", ","), "[[", 1)
month <- str_trim(str_extract(temp, "\\D+"))
day <- str_trim(str_extract(temp, "\\d+"))
num2Month <- function(x) {
months <- c(
january = 1,
february = 2,
march = 3,
april = 4,
may = 5,
june = 6,
july = 7,
august = 8,
september = 9,
october = 10,
november = 11,
december = 12
)
x <- tolower(x)
month_new = lapply(x, function(x)
months[x])
month_new = as.numeric(unlist(month_new))
}
month = as.character(num2Month(month))
roster_file$"Birth Date" = as.Date(paste(year, month, day, sep = "-"),
format = "%Y-%m-%d")
# Clean the College Column
roster_file[, 9][which(roster_file$College == "")] <- NA
roster_file$Team <- rep(f_name[k], time = nrow(roster_file))
str(roster_file)
# clean stats-data
setwd("../stat-data")
folder <- getwd()
stat_file = read.csv(paste(paste0(folder, "/"), file_list[k], sep = ''), as.is = TRUE)
# change column names
col_names <- c(
"Rank",
"Player",
"Age",
"Games",
"Games_Started",
"Minutes_Played",
"Field_Goals",
"Field_Goal_Attempts",
"Field_Goal_Percentage",
"3-Point_Field_Goals",
"3-Point_Field_Goal_Attempts",
"3-Point_Field_Goal_Percentage",
"2-Point_Field_Goals",
"2-point_Field_Goal_Attempts",
"2-Point_Field_Goal_Percentage",
"Effective_Field_Goal_Percentage",
"Free_Throws",
"Free_Throw_Attempts",
"Free_Throw_Percentage",
"Offensive_Rebounds",
"Defensive_Rebounds",
"Total_Rebounds",
"Assists",
"Steals",
"Blocks",
"Turnovers",
"Personal Fouls",
"Points"
)
colnames(stat_file) <- col_names
#remove the one whose position is not one of the 5 required positions
if (length(removed) >= 1) {
stat_file = stat_file[-removed,]
}
stat_file[, 1] <- as.numeric(stat_file[, 1])
for (i in 3:ncol(stat_file)) {
index = which(is.na(stat_file[, i]))
if (length(index) >= 1) {
stat_file[, i][which(is.na(stat_file[, i]))] <-  NA
}
stat_file[, i] = as.numeric(stat_file[, i])
}
stat_file$Team <- rep(f_name[k], time = nrow(stat_file))
str(stat_file)
# clean salary-data
setwd("../salary-data")
folder <- getwd()
folder <- paste0(folder, "/")
salary_file = read.csv(paste(folder, file_list[k], sep = ''), as.is = TRUE)
if (length(removed) >= 1) {
salary_file = salary_file[-removed,]
}
colnames(salary_file)[1] <- "Rank"
colnames(salary_file)[2] <- "Player"
colnames(salary_file)[3] <- "Salary"
salary_file[, 1] <- as.numeric(salary_file[, 1])
salary_file[, 3] <-
sapply(str_split(salary_file[, 3], "[$]"), "[[", 2)
salary_file[, 3] <- gsub(",", "", salary_file[, 3])
salary_file[, 3] <- as.numeric(salary_file[, 3])
salary_file$Team <- rep(f_name[k], time = nrow(salary_file))
str(salary_file)
temp = data.frame()
temp = merge(
x = roster_file,
y = stat_file,
by = c("Player", "Team"),
all = TRUE
)
temp = merge(x = temp, y = salary_file, by = c("Player", "Team"), all = TRUE)
roster_salary_stats = rbind(roster_salary_stats, temp)
}
colnames(roster_salary_stats)[11] <- "Rank_Totals"
colnames(roster_salary_stats)[38] <- "Rank_Salary"
write.csv(
roster_salary_stats,
file = paste0('../../cleandata/', "roster-salary-stats-test" , ".csv"),
row.names = FALSE
)
# clean-data-script oster-salary-stats.csv
library(stringr)
# Set current working directory to the one containing clean-data-scripts.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../data/rawdata/roster-data")
folder <- getwd()
#folder = paste0(folder, "/")
file_list <- list.files(path = paste0(folder,"/"), pattern = "*.csv")
f_name = c()
#
for (id in 1:length(file_list)) {
name <- str_split(file_list[id], pattern = '')
name <- unlist(name)
name <- name[1:which(name == '.') - 1]
f_name[id] <- paste0(name, collapse = '')
}
roster_salary_stats = data.frame()
removed = 0
# length(file_list)
for (k in 1:2){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../data/rawdata/roster-data")
# setwd("../rawdata/roster-data")
folder <- getwd()
#read roster_file
roster_file = read.csv(paste(paste0(folder, "/"), file_list[k], sep = ''),
as.is = TRUE,
row.names = NULL, header = TRUE)
# change the variable name/col name
colnames(roster_file)[7] <- "roster.Country"
colnames(roster_file)[6] <- "roster.Birth Date"
col_names <-
sapply(str_split(colnames(roster_file), "[.]"), "[[", 2)
colnames(roster_file) <- col_names
index = c(1, 3, 4, 5, 8)
name = c("Number", "Position", "Height", "Weight", "Experience")
for (j in 1:length(index)) {
names(roster_file)[index[j]] <- paste(name[j])
}
# remove position
position_ls <- c("C", "PF", "SF", "SG", "PG")
removed =  which(!roster_file$Position %in% position_ls)
if (length(removed) >= 1) {
roster_file =  roster_file[-removed, ]
}
roster_file$Position = factor(roster_file$Position)
# change Number to numeric
roster_file[, 1] <- as.numeric(roster_file[, 1])
# Clean Country column ( change to upper case)
roster_file[, 7] <- toupper(roster_file[, 7])
# Clean the Experience Column
invalid_R = which(roster_file$Experience == "R")
if (length(invalid_R >= 1)) {
roster_file[, 8][which(roster_file$Experience == "R")] <- "0"
}
roster_file[, 8] <- as.numeric(roster_file[, 8])
# Clean the Height Column
ft = sapply(str_split(roster_file$Height, "-"), "[[", 1)
inches = sapply(str_split(roster_file$Height, "-"), "[[", 2)
roster_file$Height = round(as.numeric(paste0(ft, ".", inches)) * 0.3048, digits = 2)
# Clean the weight column
roster_file[, 5] = round(as.numeric(roster_file[, 5] * 0.453592), digits = 2)
# Clean the Birth Date column
year <-
sapply(str_split(roster_file$"Birth Date", ","), "[[", 2)
temp <-
sapply(str_split(roster_file$"Birth Date", ","), "[[", 1)
month <- str_trim(str_extract(temp, "\\D+"))
day <- str_trim(str_extract(temp, "\\d+"))
num2Month <- function(x) {
months <- c(
january = 1,
february = 2,
march = 3,
april = 4,
may = 5,
june = 6,
july = 7,
august = 8,
september = 9,
october = 10,
november = 11,
december = 12
)
x <- tolower(x)
month_new = lapply(x, function(x)
months[x])
month_new = as.numeric(unlist(month_new))
}
month = as.character(num2Month(month))
roster_file$"Birth Date" = as.Date(paste(year, month, day, sep = "-"),
format = "%Y-%m-%d")
# Clean the College Column
roster_file[, 9][which(roster_file$College == "")] <- NA
roster_file$Team <- rep(f_name[k], time = nrow(roster_file))
str(roster_file)
# clean stats-data
setwd("../stat-data")
folder <- getwd()
stat_file = read.csv(paste(paste0(folder, "/"), file_list[k], sep = ''), as.is = TRUE)
# change column names
col_names <- c(
"Rank",
"Player",
"Age",
"Games",
"Games_Started",
"Minutes_Played",
"Field_Goals",
"Field_Goal_Attempts",
"Field_Goal_Percentage",
"3-Point_Field_Goals",
"3-Point_Field_Goal_Attempts",
"3-Point_Field_Goal_Percentage",
"2-Point_Field_Goals",
"2-point_Field_Goal_Attempts",
"2-Point_Field_Goal_Percentage",
"Effective_Field_Goal_Percentage",
"Free_Throws",
"Free_Throw_Attempts",
"Free_Throw_Percentage",
"Offensive_Rebounds",
"Defensive_Rebounds",
"Total_Rebounds",
"Assists",
"Steals",
"Blocks",
"Turnovers",
"Personal Fouls",
"Points"
)
colnames(stat_file) <- col_names
#remove the one whose position is not one of the 5 required positions
if (length(removed) >= 1) {
stat_file = stat_file[-removed,]
}
stat_file[, 1] <- as.numeric(stat_file[, 1])
for (i in 3:ncol(stat_file)) {
index = which(is.na(stat_file[, i]))
if (length(index) >= 1) {
stat_file[, i][which(is.na(stat_file[, i]))] <-  NA
}
stat_file[, i] = as.numeric(stat_file[, i])
}
stat_file$Team <- rep(f_name[k], time = nrow(stat_file))
str(stat_file)
# clean salary-data
setwd("../salary-data")
folder <- getwd()
folder <- paste0(folder, "/")
salary_file = read.csv(paste(folder, file_list[k], sep = ''), as.is = TRUE)
if (length(removed) >= 1) {
salary_file = salary_file[-removed,]
}
colnames(salary_file)[1] <- "Rank"
colnames(salary_file)[2] <- "Player"
colnames(salary_file)[3] <- "Salary"
salary_file[, 1] <- as.numeric(salary_file[, 1])
salary_file[, 3] <-
sapply(str_split(salary_file[, 3], "[$]"), "[[", 2)
salary_file[, 3] <- gsub(",", "", salary_file[, 3])
salary_file[, 3] <- as.numeric(salary_file[, 3])
salary_file$Team <- rep(f_name[k], time = nrow(salary_file))
str(salary_file)
temp = data.frame()
temp = merge(
x = roster_file,
y = stat_file,
by = c("Player", "Team"),
all = TRUE
)
temp = merge(x = temp, y = salary_file, by = c("Player", "Team"), all = TRUE)
roster_salary_stats = rbind(roster_salary_stats, temp)
}
colnames(roster_salary_stats)[11] <- "Rank_Totals"
colnames(roster_salary_stats)[38] <- "Rank_Salary"
write.csv(
roster_salary_stats,
file = paste0('../../cleandata/', "roster-salary-stats-test" , ".csv"),
row.names = FALSE
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
=======
new_path
old_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/", t2)
new_path <- str_c("C:/Users/Nicolas Min/Documents/stat133-hw4/txt_files/", t2)
file.rename (from = old_path, to = new_path)
for(i in 1:length(old_path)) {
file.rename(old_path[i], new_path[i])
}
t1 <- list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
list.files("C:/Users/Nicolas Min/Documents/stat133-hw4")
str_match_all(t1, "txt")
str_match_all(t1, "*txt")
t2 <- str_match_all(t1, "*.txt")
str_match_all(t1, "*.txt")
str_extract_all(t1, "txt")
str_match_all(t1, "*txt")
t1
str_match_all(t1, "txt")
t2 <- str_extract_all(t1, "txt")
str_extract_all(t1, "txt")
str_extract_all(t1, "*\\.txt")
str_extract_all(t1, "*\.txt")
str_extract_all(t1, "*.txt")
str_extract_all(string = t1, pattern = "*.txt")
str_extract_all(string = t1, pattern = "*.txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_extract_all(string = t1, pattern = ".+txt", simplify = FALSE)
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_match_all(string = t1, pattern = ".+txt", simplify = TRUE)
str_match_all(string = t1, pattern = ".+txt")
str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE)
as.vector(str_match_all(string = t1, pattern = ".+txt"))
as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
t2 <- as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
as.vector(str_extract_all(string = t1, pattern = ".+txt", simplify = TRUE))
t2[t2!==""]
library(XML)
library(dplyr)
# load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
# subset data for position 'PG' (point guard)
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# statistics for efficiency
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
# all variables are divided by number of games
X1 <- as.matrix(c[ ,stats] / c$Games)
print(round(cor(X1), 2), print.gap = 2)
X2 <- as.matrix(pf[ ,stats] / pf$Games)
print(round(cor(X2), 2), print.gap = 2)
X3 <- as.matrix(pg[ ,stats] / pg$Games)
print(round(cor(X3), 2), print.gap = 2)
X4 <- as.matrix(sf[ ,stats] / sf$Games)
print(round(cor(X4), 2), print.gap = 2)
X5 <- as.matrix(sg[ ,stats] / sg$Games)
print(round(cor(X5), 2), print.gap = 2)
# PCA with prcomp()
c_pca <- prcomp(X1, center = TRUE, scale. = TRUE)
c_weights <- c_pca$rotation[,1]
pf_pca <- prcomp(X2, center = TRUE, scale. = TRUE)
pf_weights <- pf_pca$rotation[,1]
pg_pca <- prcomp(X3, center = TRUE, scale. = TRUE)
pg_weights <- pg_pca$rotation[,1]
sf_pca <- prcomp(X4, center = TRUE, scale. = TRUE)
sf_weights <- sf_pca$rotation[,1]
sg_pca <- prcomp(X5, center = TRUE, scale. = TRUE)
sg_weights <- sg_pca$rotation[,1]
# std deviations for each columns
c_sigmas <- apply(X1, 2, sd)
pf_sigmas <- apply(X2, 2, sd)
pg_sigmas <- apply(X3, 2, sd)
sf_sigmas <- apply(X4, 2, sd)
sg_sigmas <- apply(X5, 2, sd)
# modified efficiency
c_eff <- X1 %*% (c_weights / c_sigmas)
c$EFF <- c_eff
pf_eff <- X2 %*% (pf_weights / pf_sigmas)
pf$EFF <- pf_eff
pg_eff <- X3 %*% (pg_weights / pg_sigmas)
pg$EFF <- pg_eff
sf_eff <- X4 %*% (sf_weights / sf_sigmas)
sf$EFF <- sf_eff
sg_eff <- X5 %*% (sg_weights / sg_sigmas)
sg$EFF <- sg_eff
#Create data set "eff-stats-salary.csv"
# Modify team_data
team_data_modified <- rbind(c, pf, pg, sf, sg)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
View(eff_stats_salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, -Missed_Field_Goals,
-Missed_Free_Throws, -Turnovers, Games, EFF, Salary)
View(eff_stats_salary)
eff_stats_salary <- team_data_modified %>%
mutate(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
mutate(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
mutate(Turnovers = -1 * Turnovers) %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, EFF, Salary)
team_data_modified <- rbind(c, pf, pg, sf, sg)
eff_stats_salary <- team_data_modified %>%
mutate(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
mutate(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
mutate(Turnovers = -1 * Turnovers) %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, EFF, Salary)
eff_stats_salary <- team_data_modified %>%
mutate(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
mutate(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
mutate(Turnovers = -1 * Turnovers)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, EFF, Salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, EFF, Salary) %>%
transmute(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
transmute(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
transmute(Turnovers = -1 * Turnovers) %>%
View(eff_stats_salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, EFF, Salary)
View(eff_stats_salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, EFF, Salary) %>%
transmute(Missed_Free_Throws = -1* Missed_Free_Throws)
team_data_modified <- rbind(c, pf, pg, sf, sg)
View(team_data_modified)
team_data_modified <- rbind(c, pf, pg, sf, sg) %>%
transmute(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
transmute(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
transmute(Turnovers = -1 * Turnovers)
sg
c_eff <- X1 %*% (c_weights / c_sigmas)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
View(c)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
team_data_modified <- rbind(c, pf, pg, sf, sg) %>%
transmute(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
transmute(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
transmute(Turnovers = -1 * Turnovers)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
View(sg)
library(dplyr)
# load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
# subset data for position 'PG' (point guard)
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# statistics for efficiency
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
# all variables are divided by number of games
X1 <- as.matrix(c[ ,stats] / c$Games)
print(round(cor(X1), 2), print.gap = 2)
X2 <- as.matrix(pf[ ,stats] / pf$Games)
print(round(cor(X2), 2), print.gap = 2)
X3 <- as.matrix(pg[ ,stats] / pg$Games)
print(round(cor(X3), 2), print.gap = 2)
X4 <- as.matrix(sf[ ,stats] / sf$Games)
print(round(cor(X4), 2), print.gap = 2)
X5 <- as.matrix(sg[ ,stats] / sg$Games)
print(round(cor(X5), 2), print.gap = 2)
# PCA with prcomp()
c_pca <- prcomp(X1, center = TRUE, scale. = TRUE)
c_weights <- c_pca$rotation[,1]
pf_pca <- prcomp(X2, center = TRUE, scale. = TRUE)
pf_weights <- pf_pca$rotation[,1]
pg_pca <- prcomp(X3, center = TRUE, scale. = TRUE)
pg_weights <- pg_pca$rotation[,1]
sf_pca <- prcomp(X4, center = TRUE, scale. = TRUE)
sf_weights <- sf_pca$rotation[,1]
sg_pca <- prcomp(X5, center = TRUE, scale. = TRUE)
sg_weights <- sg_pca$rotation[,1]
# std deviations for each columns
c_sigmas <- apply(X1, 2, sd)
pf_sigmas <- apply(X2, 2, sd)
pg_sigmas <- apply(X3, 2, sd)
sf_sigmas <- apply(X4, 2, sd)
sg_sigmas <- apply(X5, 2, sd)
c_eff <- X1 %*% (c_weights / c_sigmas)
pf_eff <- X2 %*% (pf_weights / pf_sigmas)
pg_eff <- X3 %*% (pg_weights / pg_sigmas)
sf_eff <- X4 %*% (sf_weights / sf_sigmas)
sg_eff <- X5 %*% (sg_weights / sg_sigmas)
c_eff <- X1 %*% (c_weights / c_sigmas)
pf_eff <- X2 %*% (pf_weights / pf_sigmas)
pg_eff <- X3 %*% (pg_weights / pg_sigmas)
sf_eff <- X4 %*% (sf_weights / sf_sigmas)
sg_eff <- X5 %*% (sg_weights / sg_sigmas)
View(c)
team_data_modified <- rbind(c, pf, pg, sf, sg)
team_data_modified
team_data_modified <- rbind(c, pf, pg, sf, sg) %>%
transmute(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
transmute(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
transmute(Turnovers = -1 * Turnovers)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
# all variables are divided by number of games
X1 <- as.matrix(c[ ,stats] / c$Games)
print(round(cor(X1), 2), print.gap = 2)
X2 <- as.matrix(pf[ ,stats] / pf$Games)
print(round(cor(X2), 2), print.gap = 2)
X3 <- as.matrix(pg[ ,stats] / pg$Games)
print(round(cor(X3), 2), print.gap = 2)
X4 <- as.matrix(sf[ ,stats] / sf$Games)
print(round(cor(X4), 2), print.gap = 2)
X5 <- as.matrix(sg[ ,stats] / sg$Games)
print(round(cor(X5), 2), print.gap = 2)
c_pca <- prcomp(X1, center = TRUE, scale. = TRUE)
c_weights <- c_pca$rotation[,1]
pf_pca <- prcomp(X2, center = TRUE, scale. = TRUE)
pf_weights <- pf_pca$rotation[,1]
pg_pca <- prcomp(X3, center = TRUE, scale. = TRUE)
pg_weights <- pg_pca$rotation[,1]
sf_pca <- prcomp(X4, center = TRUE, scale. = TRUE)
sf_weights <- sf_pca$rotation[,1]
sg_pca <- prcomp(X5, center = TRUE, scale. = TRUE)
sg_weights <- sg_pca$rotation[,1]
c_sigmas <- apply(X1, 2, sd)
pf_sigmas <- apply(X2, 2, sd)
pg_sigmas <- apply(X3, 2, sd)
sf_sigmas <- apply(X4, 2, sd)
sg_sigmas <- apply(X5, 2, sd)
c_eff <- X1 %*% (c_weights / c_sigmas)
pf_eff <- X2 %*% (pf_weights / pf_sigmas)
pg_eff <- X3 %*% (pg_weights / pg_sigmas)
sf_eff <- X4 %*% (sf_weights / sf_sigmas)
sg_eff <- X5 %*% (sg_weights / sg_sigmas)
c_eff
team_data_modified <- rbind(c, pf, pg, sf, sg)
View (team_data_modified)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
View(sg)
team_data_modified <- rbind(c, pf, pg, sf, sg) %>%
transmute(Missed_Free_Throws = -1* Missed_Free_Throws)
team_data_modified
View (team_data_modified)
library(dplyr)
# load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
View(team_data)
# subset data for position 'PG' (point guard)
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and "Turnovers"
# (these variables have negative sign)
c <- team_data %>%
filter(Position == 'C') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pf <- team_data %>%
filter(Position == 'PF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
pg <- team_data %>%
filter(Position == 'PG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sf <- team_data %>%
filter(Position == 'SF') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
sg <- team_data %>%
filter(Position == 'SG') %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
View(sg)
# statistics for efficiency
stats <- c('Points', 'Total_Rebounds', 'Assists', 'Steals', 'Blocks', 'Missed_Field_Goals',
'Missed_Free_Throws', 'Turnovers')
# all variables are divided by number of games
X1 <- as.matrix(c[ ,stats] / c$Games)
print(round(cor(X1), 2), print.gap = 2)
X2 <- as.matrix(pf[ ,stats] / pf$Games)
print(round(cor(X2), 2), print.gap = 2)
X3 <- as.matrix(pg[ ,stats] / pg$Games)
print(round(cor(X3), 2), print.gap = 2)
X4 <- as.matrix(sf[ ,stats] / sf$Games)
print(round(cor(X4), 2), print.gap = 2)
X5 <- as.matrix(sg[ ,stats] / sg$Games)
print(round(cor(X5), 2), print.gap = 2)
# PCA with prcomp()
c_pca <- prcomp(X1, center = TRUE, scale. = TRUE)
c_weights <- c_pca$rotation[,1]
pf_pca <- prcomp(X2, center = TRUE, scale. = TRUE)
pf_weights <- pf_pca$rotation[,1]
pg_pca <- prcomp(X3, center = TRUE, scale. = TRUE)
pg_weights <- pg_pca$rotation[,1]
sf_pca <- prcomp(X4, center = TRUE, scale. = TRUE)
sf_weights <- sf_pca$rotation[,1]
sg_pca <- prcomp(X5, center = TRUE, scale. = TRUE)
sg_weights <- sg_pca$rotation[,1]
# std deviations for each columns
c_sigmas <- apply(X1, 2, sd)
pf_sigmas <- apply(X2, 2, sd)
pg_sigmas <- apply(X3, 2, sd)
sf_sigmas <- apply(X4, 2, sd)
sg_sigmas <- apply(X5, 2, sd)
# modified efficiency
c_eff <- X1 %*% (c_weights / c_sigmas)
pf_eff <- X2 %*% (pf_weights / pf_sigmas)
pg_eff <- X3 %*% (pg_weights / pg_sigmas)
sf_eff <- X4 %*% (sf_weights / sf_sigmas)
sg_eff <- X5 %*% (sg_weights / sg_sigmas)
team_data_modified <- rbind(c, pf, pg, sf, sg) %>%
mutate(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
mutate(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
mutate(Turnovers = -1 * Turnovers)
View (team_data_modified)
EFF <-rbind(c_eff, pf_eff)
View(EFF)
EFF$EFF <-rbind(c_eff, pf_eff)
View(EFF)
EFF<-rbind(c_eff, pf_eff, pg_eff, sf_eff, sg_eff)
View(EFF)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, EFF, Salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, Salary)
View(eff_stats_salary)
str(c_eff)
c$EFF <- c_eff
str(c$EFF)
c$EFF <- c_eff
pf$EFF <- pf_eff
pg$EFF <- pg_eff
sf$EFF <- sf_eff
sg$EFF <- sg_eff
team_data_modified <- rbind(c, pf, pg, sf, sg)
team_data_modified <- rbind(c, pf, pg, sf, sg) %>%
mutate(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
mutate(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
mutate(Turnovers = -1 * Turnovers)
team_data_modified <- rbind(c, pf, pg, sf, sg)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, Salary)
View(eff_stats_salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks,
Missed_Field_Goals, Missed_Free_Throws, Turnovers, Games, Salary) %>%
mutate(Missed_Free_Throws = -1* Missed_Free_Throws) %>%
mutate(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
mutate(Turnovers = -1 * Turnovers)
View(eff_stats_salary)
team_data_modified <- rbind(c, pf, pg, sf, sg)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary)
View(eff_stats_salary)
eff_stats_salary <- team_data_modified %>%
select (Player, Points, Total_Rebounds, Assists, Steals, Blocks, Missed_Field_Goals,
Missed_Free_Throws, Turnovers, Games, EFF, Salary) %>%
mutate(Missed_Free_Throws = -1 * Missed_Free_Throws) %>%
mutate(Missed_Field_Goals = -1 * Missed_Field_Goals) %>%
mutate(Turnovers = -1 * Turnovers)
>>>>>>> origin/master
