stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- abs(eff)
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
library(shiny)
library(ggplot2)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
function(input, output) {
# Get the color_by variable so we know to color by team or position
selectedColor <- reactive({
input$color_by
})
# Get the regression_by variable so we know if we should display the
# regression lines
showRegression <- reactive({
input$regression_by
})
# Generate the scatterplot
plotObj <- reactive({
# Generate plot colored by team
if (selectedColor() == "team") {
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Team)) + geom_point()
} else {
# Generate plot by position
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Position)) + geom_point()
}
# Add regression line if box is checked
if (showRegression() == TRUE) {
p = p + geom_smooth(method = "lm", se = FALSE)
}
# Add labels to plot
p = p + labs(x = input$x_var, y = input$y_var,
title = paste(input$x_var, "vs", input$y_var))
})
# Render the plot
output$plot1 <- renderPlot({
print(plotObj())
})
# Render the correlation between the variables
output$correlation <- renderText({
# Correlation only valid if both variables are numeric
if (is.numeric(merge_data[,input$x_var]) && merge_data[,input$y_var]) {
paste("Correlation:",
cor(merge_data[,input$x_var], merge_data[,input$y_var],
use = 'pairwise.complete.obs'))
}
})
}
library(shiny)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
fluidPage(
# Title of page
headerPanel('Salary Statistics by Team'),
sidebarPanel(
# X Variable dropdown, choosing only quantitative variables
selectInput(
'x_var',
'X Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Y Variable dropdown, choosing only quantitative variables
selectInput(
'y_var',
'Y Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Radio button to choose to color by team or position
radioButtons("color_by", label = "Color",
choices = c("Team" = "team", "Position" = "position"),
selected = "team"),
# Checkbox to choose to display regression line
checkboxInput("regression_by",
label = "Show Regression Line",
value = FALSE),
textOutput("correlation")
),
# Display the plot
mainPanel(
plotOutput("plot1")
)
)
runApp()
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
library(shiny)
library(ggplot2)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
function(input, output) {
# Get the color_by variable so we know to color by team or position
selectedColor <- reactive({
input$color_by
})
# Get the regression_by variable so we know if we should display the
# regression lines
showRegression <- reactive({
input$regression_by
})
# Generate the scatterplot
plotObj <- reactive({
# Generate plot colored by team
if (selectedColor() == "team") {
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Team)) + geom_point()
} else {
# Generate plot by position
p = ggplot(merge_data, aes(x = merge_data[,input$x_var],
y = merge_data[,input$y_var],
colour = Position)) + geom_point()
}
# Add regression line if box is checked
if (showRegression() == TRUE) {
p = p + geom_smooth(method = "lm", se = FALSE)
}
# Add labels to plot
p = p + labs(x = input$x_var, y = input$y_var,
title = paste(input$x_var, "vs", input$y_var))
})
# Render the plot
output$plot1 <- renderPlot({
print(plotObj())
})
# Render the correlation between the variables
output$correlation <- renderText({
# Correlation only valid if both variables are numeric
if (is.numeric(merge_data[,input$x_var]) && merge_data[,input$y_var]) {
paste("Correlation:",
cor(merge_data[,input$x_var], merge_data[,input$y_var],
use = 'pairwise.complete.obs'))
}
})
}
library(shiny)
library(shiny)
# Set working directory to the current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Get the team-salaries table
salary_data = read.csv(file = "../../data/cleandata/eff-stats-salary.csv")
# Merge with the roster-salary-stats table so we have access to the team
# and position variables
total_data = read.csv(file = "../../data/cleandata/roster-salary-stats.csv")
merge_data = merge(salary_data, total_data)
fluidPage(
# Title of page
headerPanel('Salary Statistics by Team'),
sidebarPanel(
# X Variable dropdown, choosing only quantitative variables
selectInput(
'x_var',
'X Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Y Variable dropdown, choosing only quantitative variables
selectInput(
'y_var',
'Y Variable',
names(merge_data)[c(2:9, 11:13, 17, 18, 21, 23:29, 36:43)],
selected = names(merge_data)[13]),
# Radio button to choose to color by team or position
radioButtons("color_by", label = "Color",
choices = c("Team" = "team", "Position" = "position"),
selected = "team"),
# Checkbox to choose to display regression line
checkboxInput("regression_by",
label = "Show Regression Line",
value = FALSE),
textOutput("correlation")
),
# Display the plot
mainPanel(
plotOutput("plot1")
)
)
runApp()
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
library(dplyr)
# Load data file, "roster-salary-stats.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
team_data <- read.csv(file = "../../data/cleandata/roster-salary-stats.csv",
sep = ",")
# Statistics for efficiency
stats <- c('Points',
'Total_Rebounds',
'Assists',
'Steals',
'Blocks',
'Missed_Field_Goals',
'Missed_Free_Throws',
'Turnovers')
#Use for loops to subset the data according to positions
team_data_modified = NULL
for (position in c('C', 'PF', 'PG', 'SF', 'SG')) {
# Subset data according to players' positions
# and add columns, "Missed_Field_Goals", "Missed_Free_Throws", and
# "Turnovers" (these variables have negative sign)
position_data = team_data %>%
filter(Position == position) %>%
mutate(Missed_Free_Throws = Free_Throws - Free_Throw_Attempts) %>%
mutate(Missed_Field_Goals = Field_Goals - Field_Goal_Attempts) %>%
mutate(Turnovers = -1 * Turnovers)
# All variables divided by number of games
data_by_game = as.matrix(position_data[ ,stats] / position_data$Games)
# PCA with prcomp()
pca <- prcomp(data_by_game, center = TRUE, scale. = TRUE)
weights <- abs(pca$rotation[,1])
# Std deviations for each columns
sigmas <- apply(data_by_game, 2, sd)
# Modified efficiency
eff <- data_by_game %*% (weights / sigmas)
position_data$EFF <- eff
# Stack the subsets using "rbind()"
team_data_modified = rbind(team_data_modified, position_data)
}
#==============================================================================
# Create data set "eff-stats-salary.csv"
#==============================================================================
# Create a new table by selecting columns from team_data_modified
eff_stats_salary <- team_data_modified %>%
select (Player,
Points,
Total_Rebounds,
Assists, Steals,
Blocks,
Missed_Field_Goals,
Missed_Free_Throws,
Turnovers,
Games,
EFF,
Salary)
# Take off negative signs from columns,
# "Missed Field Goals", "Missed Free Throws", and "Turnovers".
eff_stats_salary$Missed_Field_Goals = eff_stats_salary$Missed_Field_Goals * - 1
eff_stats_salary$Missed_Free_Throws = eff_stats_salary$Missed_Free_Throws * - 1
eff_stats_salary$Turnovers = eff_stats_salary$Turnovers * - 1
# Write data set, "eff-stats-salary.csv"
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
write.csv(eff_stats_salary, file = "../../data/cleandata/eff-stats-salary.csv")
library(dplyr)
# load data file, "eff-stats-salary.csv".
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
eff_stats_salary <- read.csv(
file = "../../data/cleandata/eff-stats-salary.csv",
sep = ",")
#Entire List of players in order of their values
rank_value <- eff_stats_salary %>%
mutate (Value = EFF/Salary) %>%
arrange (Value) %>%
select (Player)
#Extracting only the top 20 and bottom 20 players
best <- head(rank_value, 20)
worst <- tail(rank_value, 20)
best_and_worst <- rbind (best, worst)
#Creating txt of the list of top 20 and bottom 20 players
write.table(
best_and_worst,
"../../data/cleandata/best-worst-value-players.txt",
sep=",")
