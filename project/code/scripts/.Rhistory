typeof(3)
typeof(int(3))
integer(3)
3
3.0
typeof(3.0)
typeof(integer(3))
typeof(3.)
typeof(3L)
typeof(3l)
typeof(3i)
typeof(0x73)
typeof("0x73")
typeof("\x73")
typeof(\x73)
1
2
1, 2
[1, 2]
[]
[1]
{1}
{1, 2}
help("list")
list(1, 2, 3)
[[1, 2, 3]]
c
a <- c(TRUE, FALSE)
a
a[[1]]
a[1]
help c
help(c)
a <- c(1, 2, 3, 4)
b <- c(4, 3, 2, 1)
a*b
a**b
a <- c("hi", "byte")
b = factor(a)
b
b[1]
b[1]
b[[1]]
b[[0]]
b[[2]]
q()
library(rmarkdown)
matrix
help(dplyr)
??dplyr
plot(1)
select
help(select)
help(c)
??c
??\??
??
"??"
??help
install.packages("dplyr")
library(dplyr)
q()
linear <- lm(wage_data ~ time(wage_data))
library(TSA)
wage_data <- read.table("http://homepage.divms.uiowa.edu/~kchan/TSA/Datasets/wages.dat", header = TRUE)
wage_data_t <- 1:length(wage_data$wages)
plot(wage_data$wages, 1:length(wage_data$wages), main="Wages over time")
linear <- lm(wage_data ~ time(wage_data))
linear <- lm(wage_data$wages ~ time(wage_data$wages))
summary(linear)
plot(as.vector(time(wage_data$wages)), rstudent(linear), type = "1", xlab="month in series", ylab="residual", main="Residuals Vs. Time")
plot(as.vector(time(wage_data$wages)), rstudent(linear), type = "l", xlab="month in series", ylab="residual", main="Residuals Vs. Time")
sum(rstudent(linear)) / length(wage_date$wages)
sum(rstudent(linear)) / length(wage_data$wages)
quadratic <- lm(wage_data$wages ~ time(wage_data$wages) + I(time(wage_data$wages)) ^ 2)
quadratic <- lm(wage_data$wages ~ time(wage_data$wages) + I(time(wage_data$wages) ^ 2))
summary(quadratic)
plot(as.vector(time(wage_data$wages)), rstudent(quadratic), type="l", xlab="month in series", ylab="residual", main="Residuals Vs. Time (Quadratic)")
rm(wage_data_t)
sum(rstudent(quadratic)) / length(wage_data$wages)
residuals <- rstudent(quadratic)
runs(residuals)
acf(residuals, main="Correlogram of Quadratic Residuals")
hist(residuals, main="Histogram of Quadratic Residuals")
# necessary packages
library(xtable)
# your circle_area() function
circle_area <- function(radius = 1) {
if (radius < 0) {
stop("Radius is negative")
} else {
area <- pi * radius^2
return(area)
}
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
# your cyl_area() function
cyl_area <- function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop("One or both inputs negative")
} else {
area <- 2*circle_area(radius) + height*2*pi*radius
return(area)
}
}
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area(radius = -2, height = 1)
cyl_area(radius = 2, height = -1)
cyl_area(radius = -2, height = -1)
# your cyl_volume() function
cyl_volume <- function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop("One or both inputs negative")
} else {
volume <- circle_area(radius) * height
return(volume)
}
}
cyl_volume()
cyl_volume(radius = 3, height = 10)
cyl_volume(height = 10, radius = 3)
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
# write the rest of the code of your function
# ...
if (is.na(unname(x[from])) | is.na(unname(x[to]))) {
stop("Invalid currency")
}
conversion <- x[to] / x[from]
converted <- unname(amount * conversion)
return(converted)
}
exchange()
exchange(amount = 10, from = 'euro', to = 'peso')
exchange(amount = 20, from = 'yuan', to = 'pound')
exchange(amount = 30, from = 'rupee', to = 'won')
# your find_distance() function
find_distance <- function(p1, p2) {
if (length(p1) != 2 | length(p2) != 2) {
stop("length(p1) and length(p2) must be 2")
} else {
dst <- ((p1[1]-p2[1])^2 + (p1[2]-p2[2])^2)^.5
return(dst)
}
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_midpoint() function
find_midpoint <- function(p1, p2) {
if (length(p1) != 2 | length(p2) != 2) {
stop("length(p1) and length(p2) must be 2")
} else {
mid <- c((p1[1]+p2[1])/2, (p1[2]+p2[2])/2)
return(mid)
}
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_midpoint(p1, p2)
# your find_slope() function
find_slope <- function(p1, p2) {
if (length(p1) != 2 | length(p2) != 2) {
stop("length(p1) and length(p2) must be 2")
} else {
slp <- (p2[2]-p1[2])/(p2[1]-p1[1])
return(slp)
}
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_slope(p1, p2)
# your find_intercept() function
find_intercept <- function(p1, p2) {
if (length(p1) != 2 | length(p2) != 2) {
stop("length(p1) and length(p2) must be 2")
} else {
interc <- p1[2] - find_slope(p1, p2) * p1[1]
return(interc)
}
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
# your find_line() function
find_line <- function(p1, p2) {
if (length(p1) != 2 | length(p2) != 2) {
stop("length(p1) and length(p2) must be 2")
} else {
lst <- list(slope = find_slope(p1, p2), intercept = find_intercept(p1, p2))
return(lst)
}
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
eq <- find_line(p1, p2)
eq$intercept
eq$slope
# your info_points() function
info_points <- function(p1, p2) {
if (length(p1) != 2 | length(p2) != 2) {
stop("length(p1) and length(p2) must be 2")
} else {
lst <- find_line(p1, p2)
lst$distance <- find_distance(p1, p2)
lst$midpoint <- find_midpoint(p1, p2)
return(lst)
}
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
results <- info_points(p1, p2)
results$distance
results$midpoint
results$intercept
results$slope
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$slope, b = plot_info$intercept, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', plot_info$slope * x, ' + ', plot_info$intercept))
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$slope, b = plot_info$intercept, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', plot_info$slope * x, ' + ', plot_info$intercept))
p1 <- c(-0.5, 3)
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
-.5+2.3
3+-2
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$slope, b = plot_info$intercept, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', plot_info$slope * x, ' + ', plot_info$intercept)))
title(main = expression(paste(y, ' = ', (plot_info$slope) * x, ' + ', (plot_info$intercept))))
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$slope, b = plot_info$intercept, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', (plot_info$slope) * x, ' + ', (plot_info$intercept))))
?abline
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$intercept, b = plot_info$slope, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', (plot_info$slope) * x, ' + ', (plot_info$intercept))))
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(-3, 3))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$intercept, b = plot_info$slope, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', (plot_info$slope) * x, ' + ', (plot_info$intercept))))
?paste
a <- 3
paste(3)
rm(a)
paste(plot_info$slope)
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(-3, 3))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$intercept, b = plot_info$slope, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', plot_info$slope, "*", x, ' + ', (plot_info$intercept))))
paste(y, plot_info$slope)
expression(paste(y, plot_info$slope))
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(-3, 3))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$intercept, b = plot_info$slope, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', plot_info$slope * x, ' + ', (plot_info$intercept))))
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(-3, 3))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$intercept, b = plot_info$slope, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', plot_info$slope * x, ' + ', plot_info$intercept)))
# change these points and pass them to info_points()
p1 <- c(-0.5, 3)
p2 <- c(2.3, -2)
plot_info <- info_points(p1, p2)
plot_info
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(-3, 3))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(plot_info$midpoint[1], plot_info$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = plot_info$intercept, b = plot_info$slope, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', -1.785714 * x, ' + ', 2.107143)))
?abline
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("../functions/raw-data-helpers.R")
# Teams to fetch
teams <- c("ATL",
"BRK",
"BOS",
"CHO",
"CHI",
"CLE",
"DAL",
"DEN",
"DET",
"GSW",
"HOU",
"IND",
"LAC",
"LAL",
"MEM",
"MIA",
"MIL",
"MIN",
"NOP",
"NYK",
"OKC",
"ORL",
"PHI",
"PHO",
"POR",
"SAC",
"SAS",
"TOR",
"UTA",
"WAS")
# Setup and execution of code to get player data
# Constants
url_base <- "http://www.basketball-reference.com/teams"
url_file <- "2016.html"
dst_names <- c(roster = "roster-data",
totals = "stat-data",
salaries = "salary-data")
# Retrieves and stores player tables in csv files
# @param tables, the tables to fetch and save (subset of names(dst_names))
# @return NULL
create_player_csvs <- function(tables = names(dst_names)) {
for (team in teams) {
team_url <- paste(url_base,
team,
url_file,
sep = "/")
print(paste("accessing", team_url))
xml_doc <- get_xml_document(team_url)
for (table_name in tables) {
print(table_name)
location <- paste0("#div_", table_name, " #", table_name)
player_frame <- get_player_table(xml_doc, location)
# Roster's country isn't labeled, so we label it for convenience
if (table_name == "roster") {
colnames(player_frame)[7] = "Country"
}
# Where to write
file_name <- paste0("../../data/rawdata/",
unname(dst_names[table_name]),
"/",
team,
".csv")
# Write to csv in rawdata directory
write.csv(player_frame, file_name, row.names = FALSE)
}
}
}
create_player_csvs(names(dst_names)[2])
source("../functions/raw-data-helpers.R")
install.packages("rvest")
source("../functions/raw-data-helpers.R")
create_player_csvs(names(dst_names)[2])
url_here <- html("http://www.basketball-reference.com/teams/GSW/2016.html")
content <- url_here %>% html_nodes("table")
content
content %>% html_table
url_here <- html("http://www.basketball-reference.com/teams/GSW/2016.html#all_totals")
content <- url_here %>% html_nodes("table")
content
content %>%html_table()
content %>%html_table()
